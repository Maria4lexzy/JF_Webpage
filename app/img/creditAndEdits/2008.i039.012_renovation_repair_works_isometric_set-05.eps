%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2008.i039.012.P.m004.c33.renovation repair works isometric set-05.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/19/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2008.i039.012.P.m004.c33.renovation repair works isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-02-19T15:10:29+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-02-19T15:10:29+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-02-19T15:10:29+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7/5l853OnxJ+jNOk1IyI&#xA;78omAHwD7INGq7HooFcwzqonJHGSIcZqy50dIBhnkJ3gNo9ZHu/amFvqF0ui211Mvo3L8DcR/a4u&#xA;y1ZTv2OZWGIJIBsWd3AyzIiJEUaCY2F6t1EWAAK7GhqPo6ZOQo0iErFonAydirsVdiqXapq/1RxD&#xA;HHzmYBuTGiKGJAJpVjuOgGWQhe5YTnSSQarHHqkd3qN4scEaPzmmcRQryoooCQq7mm5r75fKHpIA&#xA;aIZLluyzMRynYq7FXYq7FVksqxIXboMEjQSBaS32vRgLxqYy6o3EE/aJHbc9MhOEuEmW3ksJgyAj&#xA;v+LQWk+Y/M1xrFrY3mjS29q3q+vemMiI0DPEUIkcr8PFW5gfF09mMjs5WTFjHFR5VXL49fuZVlji&#xA;OxV2KuxV2KsK80+fvqYntNMjaW5W3mkaRAHaJ0A4VTcb1PXfboa5TlzwgQJER4jQs1uW2GIkXXJG&#xA;+RNabUdFlvrm7W4LSBmZUdEQGNTxDOBzPifHagycZgki7MTR8mMhsDWxZQCGAZTUHcEeGTYOxV2K&#xA;uxV2KqFxdrCeFKvSoHahr/TKcuYQbMePiQ9tPJLdKXPjQdumY+LJKU923JARij8znGeCeavN93YR&#xA;vb2031a4kb0rd1SVJFRAfVl+JAnGrUDqSa9Dml1Q5WB04ff+O7d6DQZMUc0Rl+gn8X5KWjedb1Nb&#xA;0jTtHZ59IlnH6SrD6/1iGSYQtcSNH8Uc6R0kP7XxANXM/hOlycEtvftv+n9LRn8PWYTlMvX0iNxw&#xA;+/bh93R7ppcNvHAWtpVmt5DWN1IYU+YzMMuLd0scfAKRmBLsVdirsVYX+YGopp0F1dtKIWitkMbk&#xA;cqPzkCnh+1RiK5mabGZkRHU/qcTVTERxHkP2vOb298yx39w9zc/WoNOjd3eGkcTQCM1mkKFVUOnx&#xA;Cre3tmknnyzzV57Dp8f2vcYtNoMOis85R9Uv4rG/p/Z+16h5b8++XNQsNNj+uKLy4ijVom2ZZuRh&#xA;KNsOLGRGHEgH2GZYyxvhvcc3mDiJuQ+n9DKssaXYq7FXYqhtQ/3lbIZOXyZR5vPPNzXkOmRQ6dMT&#xA;qouYHSGJBKarJVQR0+2V65tNDliZkyH7upb8ufc6/LhkI0D69tvd3sp8ueZIpoxbX5W3vvhLJX93&#xA;zKjmiGp6N7/fmHLFzMfp/Q5nH382R5UydirsVdirsVeN6zqN9bXV/d2vAixhvJVYKI7eNlK1Llgy&#xA;yyFqCn8221a5ptNiy6vWR8SPBixZNjQJlvud/p9437i5eonHFp5GJuZj+jZkH5fz340O0a4DlTDD&#xA;I70704k0PYpy3w6LHOOr1O1Y5ZSY+e5v4cmsEHBiv6hAWz+2P7kL/JVdvAdPDtm4aSq4odirsVdi&#xA;rHfNtnPdwNDDJ6ZCxycu9YpPUWlSo+0u9SNu4yjIQJi22ANGmN6R5xtFu3ttS1C1mvLeeQW7WrDj&#xA;JGCnAn4nqaSKrFf2uwrTL5YPBA4tuPl9u32NIzDITW/DzZxpetWGoofQkBlWvOI7MKGlaHtk5Y5R&#xA;5hAmDyYh5k/LSK4Wa40lgs7/AO6JSSoqeTcGNacj45iZcPFR7nYYNXwjhI2u2HaR+W+u300lnNYQ&#xA;2Vqrt6zNBHHHVqAjgopIOKinbdqk1HGmeA5CLux1stvjQhuCCD0p6v5c8tWehW8kcEkkssx5zyO2&#xA;zN4hB8K/dmTixCAoOFmznIbKb5a0uxV2KuxVKPMnlq013T7i0ldoWuI/SMyBS4WvKg5Bh19slCco&#xA;yEhzDGcBOJieRY1e+VNXhutHg08iO1tJ45rsq3pGVlAV3YRrRuSD7I4jfeozB4JCRPeCOlb+8bV5&#xA;U5RIlw77RTG0/LTypDq/6ZFkseoGZbn1I2dKSqSa/CRszMWZejHc4NNpPDJNn3dB+Ps5CguXNxbA&#xA;MrzNcd2KuxV2KqVzbR3MDQyFgrChKkqw+RGKsOu/LOo6VM11p9LmEijowBcLWpFDsfnmYM4mKls4&#xA;/hmJsbpH5c/Ku6GqHVrq9uY1m5evHMyvLKpJaNCaABYy7UJBfenKgpmDp8csM5SM+MnyofaSSaA5&#xA;VHuHO8ichOIHDX3/AI+Zem2ttFbW6QRV9OMUXkSxp8zk5GzZQBSrgS7FXYq7FWO+Y/KNrqlnHCys&#xA;628wureNZHiZZkVghDxlCacuhP05XmEzCQganWxPeygQCL5ITStK1Y3Ra4fkg5B0q/M1FPiJpQb1&#xA;zluyOx9XizDJmnYF7WTfTfy6uy1OqxShwwG/3MmtbYw1LOWZvteFaUr89s611avirsVdirsVSvXt&#xA;Ag1e3MbyvE4HwshNNtxUVxFCQNcvx+Pn0U3VPLJ/yohsbsRyWTXys4eAv+9QSCvJl2BUvtyB2PEb&#xA;bZmarw9URKZMTHuNbd3n9/dTiaeEsAMY7gs70PyY0MiXV7IVlU8kijJFD7sP4YMuqvYcmyGGtyyz&#xA;MRvdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdiqFvNStrUEO3KQDaNev0+GKtWmoLLbCaYrGGcoort7CuKkoutemKuxV2KuxV2&#xA;KrJp4oULysEUdziqDg1Mz3axLGViZSwdti1O49sVR+KuxV2KuxV2KuxVL7zWIolYQj1mX7TD7C1N&#xA;Nz88VQPl7XrvVL29EiLHbwySwxRUPMGCT0yzGv7XWlNsrhIm3L1OGMAAOdAk/wBYXt7k+yxxHYq7&#xA;FXYq7FUt1jzDpOkwyS3twkfpqGZCw5AGoBPhWm2ThjlI0BdsJ5IxFk1Sn5a1ubWLKW7ktXtE9UpA&#xA;kmztHwVg5HavI7HfDlx8Bq7RiycYuqTbK2x2KuxV2KuxVbJIkal3YKo6k7Yqgl1US3MUcSH0pCR6&#xA;rCgNBX4cVR+KsLr8JJPbc4qiNO1jT9RtrjTNOuUl1GxkVriAVDKHBpSoowp1pX3ycABRPIsMolRA&#xA;5ik70RpTbuJRQg0C0Ip9BxyVeyMV8ItMcg2OxV2KuxVASxRSauokUMqwcgD0rzpXFUs0/WWvdduD&#xA;JbNbW1qzW8Fy7oyTBSQXXiTxHOq7/wBmTlCgGMZXbIsgydirsVdirsVQWsf7xEeLKD9+KpX5l1ry&#xA;/pFmlldXcNnLckehG5414sCST2+bZGUwObfi02TICYgmkm/L7VbXUNY1yS3ieNTcySAsjKro4QJI&#xA;rMKNyC126ZGESNz13btXMGog2YARPvF38uTOsscJ2KuxV2KuxV5FrcwfUbsKruF9B5LhaBIhDM7u&#xA;WkYqoIXtWv0Zlw2hZNfV79xtt+A4s950Bf0/Yd/xzTP8sZrGDXLrT7ZZEY2MNw6rOZbarSMQ0Sk0&#xA;+NXB2H0nqYeHLwIzlX1Fvy5cZ1EowsgAbn+39T0rMdm7FXYq7FXYqlWrvFHcRySqrpHHI/B24qSo&#xA;qoJOwqcVSuDzLYtp+k6lqlzaWYdecziWluvqD4AJJRH27HLDC5ERBP3/AGWwEqjcq/HvplCsrqGU&#xA;hlYVVhuCD3GVs3lfm+182Wcc5+qNPbRKWVbdhR1BFevxsaV+FVJ8AcxNRMxBlL6R+Px0c/AcY5fU&#xA;gNAk8zzxR6rbJLDZ3kElpaTW9msc0bQ3LlJZkmcOBMiVLL8NGA2IBzP8TDk0o8I+vnvv3cQFWOe3&#xA;P5utj4o1JOT6D9m5q735eT0/y2+tvpqNrMaJeH7RQBSR25AFhXxoafPrlMbrdvycN+nkmuSa3Yq7&#xA;FXYqwv8AMmPzmlgbjyxBHNN6fCap/eBQa/u0Pwt9J+jJ4+G91eUfl/8AmI+kXT2OvTTQSQSEKLhZ&#xA;AaTMWmV6mi0YBxt3PjTNjrRDIRKHd9zh6PHOESJfztvx77e5aNqAvYIZ9Pq9pIFYEg+nxIBqjH26&#xA;U29s1hcxOcCuxV2KuxVCatBPNZOluoaUUKqTxrT3wjzUvFvOOm3E+rNcagl0NWdWt7KKF/RVYynx&#xA;yM5qT8TGgr2zG1emE5UBxcXL4b7/ABd52fqANORIxhGO8jVmyaHD8OqI8oa15ok8wCG2kluhbwDT&#xA;YpQDLtZNT/SpKcS8nqFuTEZ0ebHhjiA68/n3e6njsU8sspPTl8u/329ntGuWtozdKqXBH7xUNVB9&#xA;ic0sqvbk7QX1VcCXYq7FXYq8s85eVdcukvIbg2lvpbBZBM5lLSNG4lXlKhj9AIwqPteNKVGVZ8fH&#xA;AxBq+v8AaC3YZQiQTbzfQ/LXmSK8kuPLkkktmGAuIhM6WzhN2SO6UWrsXkBJ9NAor1I2zJxDJHFH&#xA;HOXL8edfMnzYnwhkM4i5H8cuv2e57z5Mv/Nd9Zvda7aRWSShTaWylmmQU+L1XPEMSelEFB3NdoEN&#xA;bIsCuxV2KuxViP5laNrup+XriHRkWS6KgcWbi1FcOeH+UeNF3G++WYp8MrP4tBAI76399bvG9GNz&#xA;ol48N7p/BkiP+hTqXBkbqTxPGlK8uo6dc0+KMoz9ewHU3V94H8X43D2faUsefADp6lInkKBEf5su&#xA;6jy+xmf5U6n+Y8tzOlxGLjSC4KSTHigLGr+kwrsOwG2b7WThOYlj2jXUGz8Nq83itPhlixmOQ3k4&#xA;uhsV+OXxvo9edEdSjqGU7FSKg5is1KGzt4acF2H2QSTx+VcEYgChySTathQ7FXYq7FXYq7FUo1Hy&#xA;j5a1HUINQvdOgnvLc1jmdATXelfGhNRXvkhIhU3ChQAooB0AyKuxV2KuxV2KuxVDX2nWV9F6V1EJ&#xA;F7E9R8j1GSjIg2EEA827LT7OyhEVtEI1HWnU/M4ykZGyoAHJEZFLsVdirsVdirTojqUdQysKMpFQ&#xA;QfEYqhbfSdPt35RRBafYXqq0/lHbFUXirsVdirsVdirsVQOo6HpOolTeWyTFSD8Q603ofHpgoXfU&#xA;JtGRxpGgSNQqLsFAoMKF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVzMqgsxAA6k9MVWRTxSqHjYMpJAPjTriq/FXYq7FXYq7F&#xA;XYqt9ROfCvxeGR4hdJ4TVrskh2KuxV2KuxV2Kqc9xDAnOVwq+/f5YqqAggEdDirsVdirsVdirsVc&#xA;SAKnpirSOriqmo6VyMZA8kkU3kkOxV2KuxV2KuxVDtqFkt2lmZV+suCRENzQCpJp0+nJcBq+iOIX&#xA;SIDBgCDUHoRkUvPfNHm68sr6xSSMTQXJkVogStCpQKR1/m75fj03iY5m6MBbWdR4eSAIsTlSl5c8&#xA;w3+pteO7BY7d7ZoY06IZFkLb+9BmHo9+L3OZ2lGuEj+czTRtRnujJHLQmNVIYdTUd8yJxpwsUzLn&#xA;5JnkG12KuxV2KpZrOoT2qhYlDM4+EE8dzXqd8gQZWB0F/g9EmQiAT1NJJ5V1+S91eWzuoZYbsQic&#xA;BlpEVDFGEbBmrxbrgxxIxx4jHj34uG+fx+/r5clN8cjvwmqtlUM8Uy1Q16Gh2NDuNssQqYq7FXYq&#xA;7FUNqVzJbWrSx05VAFffFXmekya4fM96dQkF3DcJI0V0svIJ6MoX0fTNCp4yjp0+kZn6icTiiBHh&#xA;r7bHP7HCwQIySJlxX9lHl9rPtRv3tLiGjEK0YqOq7HuOv45iY4cVt2XLwkJrC/qRI5FOahqfMVyt&#xA;vXYq7FXYq7FWLaj5jdNUhsGVQJIvXd+YARAaElf4k5hmQnfFKqvZzBgmIiUY2LAvz7kptdbubbSN&#xA;U1CGKNbZr3lp959Y5pcu9UAeQc/TXkFXfZQadss0s/SSRt+Az7Q04gYQjI8f8QIrh6/pZL5c1251&#xA;K1gN3b/V7l4keWMMG4MVqyVGx4naozJoUCORdcJHiMTzH606wMnYq7FXYqxbzlrd/ZPFa2r+ksqF&#xA;nkH2+tKA9sy9LijKyWjNMjYJH5QW5bWUuJoZI4y0kayyjj6jFD8S13IJNAe+WajLEwIDHFjkJWn1&#xA;tfXdo8camik0aNh4swyiUQd/xyYY5mO345vN/Mkn6V8y3UFlbXFxeaUkDco2IhCBw86lWBBfjMhH&#xA;Gh23OWeHKOHiid5ek+4tkMkDm4ZjaNSHvCpp0+u6JNaR20U1t9enh+ussaSR8Ynkj4PUHZ15OW7C&#xA;h65qADHYXz5vQwlinGUpcO0TQN7k1uK7vteqaFPp1y01xZ8lOyTRMKcWHgembDJGQoF0WOtyE3yp&#xA;sdirsVdirGfN+oLZyWrGL1lLEyqrhGVFR25AH7RLKF4++VyMxxSiLqLLhjLhEjXq/Qwry/5ivtT8&#xA;2XaW6i3tYWjjgojcysic5UYvTuteIpSu4rmwx48Z08Z/xm7+bh+LPxpQ/gjVfJm2ma/B+mZbWXkr&#xA;yniDuykgDiBUAjq3UeGY5wmuLo5HiC66slytk7FXYq7FUu8wSxxaXJLI3GNCCzHsK4k0kCzQeZxe&#xA;WNc1HzUur6eJbOwa1d0uJVQp67ng4ETOrVZUHxcae+Z8tVem8P8Aivn5c3Chp+HUeIR6a5efJB2H&#xA;5la5pF9+h/N9k15GG4RzxhfXA6DiwPCQbdyCP5j0zLnosRx8eKf087/T3OJHVZTk8PLD6uVfo73s&#xA;Gm3Vtd2EFxav6lvIgMbkFagbdGoR0zSA2HcyiQaKJwsXYq7FXYq8Y/MG31G8v7lbu9ddChtpHito&#xA;jwBnSEuA1AfUq4Ap1qaZp9TjlGyeVEvUaHtDDg05lEDxo9Tvfl5JJ5h1Kfyf+Ws9jM76z+lpP0Zb&#xA;6PalF9CaeP1jzd1Z0k4b04k1IFN65stBjli3PyLre2dfi1c7jHh7z1P46bPVvIUOnppVlDZvJ/od&#xA;tDbyxzULgxxhK8l+Bq07Zm5jI7yr1b7OkhCMSavbbdlmUNrsVdirsVeYfm7fXtrq2jLHA/1SYMst&#xA;8vICCTkPTLEfAQQzfC3U/LKs8yIgAuXo4gyJLFLsW2hSyS6tqk0sSKfqVnaTOLmMScY4yGTiqFZJ&#xA;TxAIC1FP5cqwETyRhKVWevzbtVIY8cpCNmmQaf5t1zUNU0ZPSM1pqMtujStGxaILCfXoRTdZoyrc&#xA;vfLJz4cpAO1kfBohijPAJEeqgfi9MvtHtrpvWUtb3QBC3EXwtv4/zfTmTGZHucMxBSix8oSrcGXU&#xA;LyS4VWrGgZhX3Y1r37ZbPMCNogMI4yOZLIooYoYxHEgRB0VRQZjktq/FXYq7FXYqpXVpbXURhuI1&#xA;ljP7LD9WEEg2EEWxe68hxtdK1tcGO3b7asKsB7Hv9OZUdWa3FtJwC9mQado9hp4Jgj/etu8zbux9&#xA;z/TMeUzLm3CICNyCXYq7FXYq5lDAqwqDsQemKsX8x+ShqFk0OnXcliCSxtlZvq7E77oOm/h92Vzx&#xA;2G/Fn4TZFoXy3+WuladwuL+l7djcBh+6U+y9/mcGPEIs82qM+WwZkAAAAKAdAMtcV2KuxV2KuxVL&#xA;tX0DTNVgeK6hVuYoSVVvlVWBVqdqjAQCKIsIIYvaflToPrH67b280CzvcrGsMYLSyULu7U5VYqpb&#xA;xIHgMvyZRKjW7GETEEWzS2tba1hWG3jWKJfsogAH4ZSzVcVdirsVdiqlc2tvcwtDcRrLE4IZWFQQ&#xA;cBAPNIJHJjqfl75ahubOaDT7cPYgi0kZAXiG32WO/bMHNoIzkDZ91mvlyPxcmOqPXmyKG2ii6Crf&#xA;zHMuGKMeTRKZkq5YwdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirEdX/MLTbaaS2g5s6KzclALHiKnirEU23q2Qyz4PMuRg05&#xA;nudg15c8y3FxPqIkkSWK3aABV5fA0nqcv3j05/YH7IH68GLiJIlzRqRGMRIciyq3uI505JUU6gih&#xA;GWkU44NquBLsVdirsVQ11eiFxDGjSzsKqi+HSpOKoWF739JxrcuPijLCNfsr2+nFUzxV2KuxV2Ku&#xA;xVZPPHBE0shoi9e/XbFUrvbq+lgaRaW0P7IY0dv6YqidO1e1vJ7i1j5ia1CGQMjKpEgPEqxAVvsm&#xA;vEmnfHrSjcX0R2KuxV2KuxV2KsU13zxBaO9tZgGZSUaaTZQVrUKDQkimZeLTWLlyaJ5q2Cn5W8xS&#xA;3GkLfmb63Hc3DES1qCnpoRxptgzwje3LhRGZA372T2l/bXQrE1WG5U7EZjGJDdGQPJEYGTsVdirs&#xA;VQWpatbWCVl3ciqr/blGp1OPBAzyHhiGePHKZqIspbYaxJdXolkekChjxXoAF70x0+px5oCcDxRK&#xA;zxyiaI3R9jqyTsI3pzJoCp2J8KGhzJMaFtMZ2SO54nrJksdWuZ4kRi6y8VlYJH8aspJJKjavjmNq&#xA;MNZK/nO202e8N/zf0IzR/M66Lcahb/V5NehnmVbq807hRGiZuHpxksZAyyD4qhVPVu+Wa/ONLkEp&#xA;jh46O/Tn5D5c+63XYQNTi4Ym+AkbfA+fz+57Bo9j9VSTdX9QgrKtPiUDbf6ctnPiNtWPGYCkwyLN&#xA;2KuxV2KpfPPFBqhkkNFFt/xvXFWH6X5psr7zleX8NvcNFbxmykmMhMSvGzNwEYJX4xRlaniCRsDk&#xA;ZsUscQDylv8Ad8e+/cGnDOOSRI5x2/HTur3lmGlajJetOWAVU48F771/pmMC5BFJhhYuxV2KuxVB&#xA;6x/xzpv9j/xIYqwbVvNFkfMuq29xqf7m3FukFoyAKgaJnd1ZV5NyPifbuMyZR4McZkek3v8Aj9Tj&#xA;xHi5DCP1CtvJD+R/OVpf+er2xjnKW7WtIVm4q7yRtGSF2+IASkgVrua9qAzhLCCD6uLl5V+xmcGT&#xA;Hloj08PPzv8Aa9NzHbXYq7FXYq7FXjHme9s4r28Zo0ubm1uGmhhdQyrIklUd67UUsDmWdREmOPr6&#xA;fgw/LSEJZT9PqrzpG/lvrl1dW0Oi3+mzQiQNdWmqQ0a1aMoqkMf2SGHClWYkV6b5iaztDFHUyxDa&#xA;tvwO7zG3TY7MNLppywxnLcnf8fi3omj2M1rcSB90ZfgcdCKjJymJAUnHjMSb8k2yDa7FXYq7FWL+&#xA;b7JbuZI2Jp6dKKWUmpP7SkMPmN81Ha3Zp1PCQRcN6O8Ty5+XwvupytNqPDJ82L+W75IPMGqRWUV1&#xA;Lb290nrtK4Kxl415LHzNafC3SnX5Zt46IabBiiOXD5d/kBf397hY84y5MnQg+f7WbWVnb/XzJDLW&#xA;VDWWFtnCk7NQ0NDTrkjksUowgS4u9KfNXkCw1TT3jiQrKisYXTiHD1Dg7ijbr3yiYnxCYNkOTCY4&#xA;TA7RLF9L8kXS6lHFpsdyLeJON6moqhszLxSP1BEoVZJSqHkVFD/NXI5cuTNQl069fdbZjxYcNmPX&#xA;pf2+T1K2t/RSnIn27D5ZLFj4A0TnxFWy1g7FXYq7FUo8w6HNqlrJHDctbu6cGANAw37j4h9rqMSL&#xA;BHePl5hQaNsNh0EaDAbGxtZmvruUyTSSfHzbiAXBUBTU/wBuX4IAxjGUvTAUO/8AH9ga5yIkZRHq&#xA;kd2QaD5WvYbhb69uHSYbiKNqGnWjEdvbJ5M4rhiNmMMZuyd2U5itzsVdirsVUL60S8tJbZ3aNZRT&#xA;mhow3rUHEpBp4x5m/LLXdL1OXVYJfr9k6kSEITKOhq5r7eByOWcvCGPmAb+/9bk6fg8bxDtIxry6&#xA;fqRXln8utX1RkubqtjadVkYfvWHX4F7fM5iwwk83MzauMdhuXr1lai0tIrYSPKIlCiSVi7mndmPX&#xA;MsCnVSNm1bCh2KuxV2KsX1fyPply0skdsjvcyRtdMxYMyI4dl2IrzpxI22616ZRlxEniB3ciGY8P&#xA;Afptit15C8wX94siX0tsQVkkS3b0Y+ZDqUZaN8KgL2+jNfk0857DY2Ofk3ZskTEAGvc9LtbYwrux&#xA;JPbtmxxYuAOLknxK+XNbsVdirsVSzWNHlvWjntrgwXMQoqsA8Tj+WRetN+oNchOAkKLOE+EvPL6P&#xA;zL5fvLy3sLCQvq0vqSzvS4VnNdogiRqoFf2gT4745s+QiMa2iKDbptNhBMidzuU38u+RdYk1BNZ1&#xA;m7eC5ryWCBiriprxZh0HsMrjiN2W3LqIiPDEbP8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:db839699-5199-7844-912a-63f77d36bb00</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:db839699-5199-7844-912a-63f77d36bb00</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0aa58121-ffc1-4cf3-acb8-24d0cc1b8dc0</stRef:instanceID>
            <stRef:documentID>xmp.did:792929db-7129-1548-9797-09cecad543f8</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7d1c7ba3-75f5-e74d-a43e-9e0c5aed4fde</stEvt:instanceID>
                  <stEvt:when>2020-08-20T19:55:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:792929db-7129-1548-9797-09cecad543f8</stEvt:instanceID>
                  <stEvt:when>2021-02-11T13:49:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:db839699-5199-7844-912a-63f77d36bb00</stEvt:instanceID>
                  <stEvt:when>2021-02-19T15:10:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=62 G=42 B=37</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>61</xmpG:red>
                           <xmpG:green>42</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
222.073 54.3259 mo
80.1765 136.25 li
85.9856 139.512 li
227.927 57.5616 li
222.073 54.3259 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.968627 .968627 .968627 rgb
f
80.1765 136.25 mo
80.1311 136.276 li
80.1311 310.343 li
85.9858 313.724 li
85.9856 139.512 li
80.1765 136.25 li
cp
.74902 .74902 .74902 rgb
f
85.9858 313.724 mo
227.927 395.674 li
227.927 385.363 li
85.9858 303.413 li
85.9858 313.724 li
cp
f
369.869 303.413 mo
227.927 385.363 li
227.927 395.674 li
369.869 313.724 li
369.869 303.413 li
cp
.85098 .85098 .85098 rgb
f
227.927 221.463 mo
85.9858 303.413 li
227.927 385.363 li
369.869 303.413 li
227.927 221.463 li
cp
.627451 .72549 .882353 rgb
f
227.928 57.5598 mo
227.928 221.462 li
181.123 248.486 li
180.109 249.069 li
133.805 275.805 li
132.791 276.388 li
85.9863 303.412 li
85.9863 139.511 li
132.791 112.486 li
133.805 111.903 li
180.109 85.1673 li
181.123 84.5844 li
227.928 57.5598 li
cp
1 .909804 .768627 rgb
f
gsave
123.615 289.759 mo
132.023 294.645 li
131.952 294.604 131.854 294.609 131.746 294.672 cv
123.338 289.785 li
123.446 289.723 123.544 289.718 123.615 289.759 cv
cp
clp
131.746 294.672 mo
123.338 289.785 li
123.449 289.74 li
131.857 294.626 li
131.746 294.672 li
cp
.721569 .72549 .823529 rgb
f
131.857 294.626 mo
123.449 289.74 li
123.615 289.759 li
132.023 294.645 li
131.857 294.626 li
cp
.576471 .580392 .658824 rgb
f
grestore
gsave
128.981 299.742 mo
120.573 294.855 li
120.503 294.815 120.459 294.728 120.459 294.606 cv
128.868 299.492 li
128.868 299.615 128.911 299.701 128.981 299.742 cv
cp
clp
128.981 299.742 mo
120.573 294.855 li
120.503 294.815 120.459 294.728 120.459 294.606 cv
128.868 299.492 li
128.868 299.615 128.911 299.701 128.981 299.742 cv
cp
.576471 .580392 .658824 rgb
f
grestore
128.868 299.492 mo
120.459 294.606 li
120.451 291.901 li
128.86 296.787 li
128.868 299.492 li
cp
.639216 .643137 .729412 rgb
f
129.25 296.113 mo
120.842 291.227 li
123.338 289.785 li
131.746 294.672 li
129.25 296.113 li
cp
.760784 .764706 .870588 rgb
f
gsave
128.86 296.787 mo
120.451 291.901 li
120.451 291.654 120.626 291.351 120.842 291.227 cv
129.25 296.113 li
129.034 296.237 128.859 296.541 128.86 296.787 cv
cp
clp
128.86 296.787 mo
120.451 291.901 li
120.452 291.887 li
128.86 296.773 li
128.86 296.787 li
cp
.576471 .580392 .658824 rgb
f
128.86 296.773 mo
120.452 291.887 li
120.483 291.703 li
128.892 296.59 li
128.86 296.773 li
cp
.721569 .72549 .823529 rgb
f
128.892 296.59 mo
120.483 291.703 li
120.539 291.525 120.66 291.349 120.804 291.25 cv
129.213 296.136 li
129.069 296.235 128.947 296.412 128.892 296.59 cv
cp
.866667 .870588 .988235 rgb
f
129.213 296.136 mo
120.804 291.25 li
120.842 291.227 li
129.25 296.113 li
129.213 296.136 li
cp
.721569 .72549 .823529 rgb
f
grestore
131.746 294.672 mo
131.96 294.548 132.137 294.648 132.137 294.895 cv
132.145 297.6 li
132.146 297.846 131.971 298.15 131.756 298.274 cv
129.26 299.715 li
129.044 299.839 128.868 299.739 128.868 299.492 cv
128.86 296.787 li
128.859 296.541 129.034 296.237 129.25 296.113 cv
131.746 294.672 li
cp
.541176 .541176 .615686 rgb
f
gsave
116.142 298.827 mo
123.904 294.317 li
124.085 294.212 124.334 294.226 124.61 294.386 cv
116.848 298.897 li
116.572 298.737 116.323 298.722 116.142 298.827 cv
cp
clp
116.142 298.827 mo
123.904 294.317 li
124.064 294.224 124.279 294.225 124.518 294.337 cv
116.756 298.848 li
116.517 298.735 116.302 298.734 116.142 298.827 cv
cp
.576471 .580392 .658824 rgb
f
116.756 298.848 mo
124.518 294.337 li
124.61 294.386 li
116.848 298.897 li
116.756 298.848 li
cp
.721569 .72549 .823529 rgb
f
grestore
gsave
125.311 296.739 mo
117.549 301.249 li
117.727 301.146 117.837 300.925 117.838 300.612 cv
117.84 299.981 117.397 299.213 116.848 298.897 cv
124.61 294.386 li
125.159 294.702 125.602 295.47 125.601 296.101 cv
125.6 296.414 125.489 296.635 125.311 296.739 cv
cp
clp
116.848 298.897 mo
124.61 294.386 li
124.995 294.608 125.328 295.053 125.492 295.516 cv
117.73 300.027 li
117.567 299.563 117.233 299.119 116.848 298.897 cv
cp
.721569 .72549 .823529 rgb
f
117.73 300.027 mo
125.492 295.516 li
125.562 295.713 125.601 295.913 125.601 296.101 cv
125.6 296.414 125.489 296.635 125.311 296.739 cv
117.549 301.249 li
117.727 301.146 117.837 300.925 117.838 300.612 cv
117.839 300.424 117.8 300.224 117.73 300.027 cv
cp
.576471 .580392 .658824 rgb
f
grestore
116.848 298.897 mo
117.397 299.213 117.84 299.981 117.838 300.612 cv
117.836 301.243 117.39 301.497 116.842 301.18 cv
116.293 300.864 115.85 300.096 115.852 299.465 cv
115.854 298.834 116.3 298.58 116.848 298.897 cv
cp
.733333 .737255 .835294 rgb
f
106.16 303.715 mo
115.487 298.295 li
115.763 298.134 116.147 298.157 116.57 298.401 cv
107.243 303.821 li
106.82 303.577 106.437 303.554 106.16 303.715 cv
cp
1 .717647 0 rgb
f
gsave
106.16 303.715 mo
115.487 298.295 li
115.763 298.134 116.147 298.157 116.57 298.401 cv
107.243 303.821 li
106.82 303.577 106.437 303.554 106.16 303.715 cv
cp
clp
106.16 303.715 mo
115.487 298.295 li
115.732 298.152 116.061 298.154 116.428 298.326 cv
107.101 303.747 li
106.735 303.574 106.405 303.572 106.16 303.715 cv
cp
f
107.101 303.747 mo
116.428 298.326 li
116.57 298.401 li
107.243 303.821 li
107.101 303.747 li
cp
f
grestore
117.643 302.005 mo
108.316 307.425 li
108.589 307.266 108.758 306.929 108.76 306.449 cv
108.763 305.483 108.084 304.307 107.243 303.821 cv
116.57 298.401 li
117.41 298.886 118.09 300.062 118.087 301.028 cv
118.085 301.508 117.916 301.846 117.643 302.005 cv
cp
f
gsave
117.643 302.005 mo
108.316 307.425 li
108.589 307.266 108.758 306.929 108.76 306.449 cv
108.763 305.483 108.084 304.307 107.243 303.821 cv
116.57 298.401 li
117.41 298.886 118.09 300.062 118.087 301.028 cv
118.085 301.508 117.916 301.846 117.643 302.005 cv
cp
clp
107.243 303.821 mo
116.57 298.401 li
117.16 298.742 117.671 299.423 117.921 300.133 cv
108.595 305.553 li
108.344 304.844 107.833 304.162 107.243 303.821 cv
cp
1 .831373 .219608 rgb
f
108.595 305.553 mo
117.921 300.133 li
118.028 300.434 118.088 300.741 118.087 301.028 cv
118.085 301.508 117.916 301.846 117.643 302.005 cv
108.316 307.425 li
108.589 307.266 108.758 306.929 108.76 306.449 cv
108.76 306.161 108.701 305.854 108.595 305.553 cv
cp
1 .717647 0 rgb
f
grestore
107.243 303.821 mo
108.084 304.307 108.763 305.483 108.76 306.449 cv
108.757 307.415 108.074 307.804 107.233 307.319 cv
106.392 306.833 105.713 305.657 105.716 304.691 cv
105.719 303.725 106.402 303.336 107.243 303.821 cv
cp
1 .635294 0 rgb
f
232.742 241.718 mo
232.643 195.065 li
232.65 197.31 231.179 199.558 228.235 201.258 cv
228.333 247.911 li
231.278 246.211 232.748 243.963 232.742 241.718 cv
cp
.85098 .85098 .85098 rgb
f
gsave
232.742 241.718 mo
232.643 195.065 li
232.65 197.31 231.179 199.558 228.235 201.258 cv
228.333 247.911 li
231.278 246.211 232.748 243.963 232.742 241.718 cv
cp
clp
228.235 201.258 mo
228.333 247.911 li
231.278 246.211 232.748 243.963 232.742 241.718 cv
232.643 195.065 li
232.65 197.31 231.179 199.558 228.235 201.258 cv
cp
f
grestore
212.2 210.516 mo
212.298 257.169 li
228.333 247.911 li
228.235 201.258 li
212.2 210.516 li
cp
.792157 .792157 .792157 rgb
f
186.621 204.41 mo
186.72 251.062 li
186.726 253.277 188.174 255.488 191.066 257.169 cv
196.878 260.547 206.438 260.552 212.298 257.169 cv
212.2 210.516 li
206.34 213.899 196.78 213.894 190.967 210.516 cv
188.075 208.835 186.628 206.624 186.621 204.41 cv
cp
f
gsave
186.621 204.41 mo
186.72 251.062 li
186.726 253.277 188.174 255.488 191.066 257.169 cv
196.878 260.547 206.438 260.552 212.298 257.169 cv
212.2 210.516 li
206.34 213.899 196.78 213.894 190.967 210.516 cv
188.075 208.835 186.628 206.624 186.621 204.41 cv
cp
clp
186.621 204.41 mo
186.72 251.062 li
186.726 253.277 188.174 255.488 191.066 257.169 cv
196.878 260.547 206.438 260.552 212.298 257.169 cv
212.2 210.516 li
206.34 213.899 196.78 213.894 190.967 210.516 cv
188.075 208.835 186.628 206.624 186.621 204.41 cv
cp
.85098 .85098 .85098 rgb
f
grestore
191.037 198.217 mo
185.177 201.6 185.145 207.133 190.967 210.516 cv
196.78 213.894 206.34 213.899 212.2 210.516 cv
228.235 201.258 li
234.085 197.88 234.117 192.337 228.304 188.959 cv
222.483 185.576 212.923 185.581 207.072 188.959 cv
191.037 198.217 li
cp
.74902 .74902 .74902 rgb
f
232.671 194.064 mo
232.638 182.174 li
232.644 184.417 231.171 186.664 228.223 188.366 cv
228.256 200.257 li
231.205 198.554 232.678 196.308 232.671 194.064 cv
cp
.85098 .85098 .85098 rgb
f
gsave
232.671 194.064 mo
232.638 182.174 li
232.644 184.417 231.171 186.664 228.223 188.366 cv
228.256 200.257 li
231.205 198.554 232.678 196.308 232.671 194.064 cv
cp
clp
228.223 188.366 mo
228.256 200.257 li
231.205 198.554 232.678 196.308 232.671 194.064 cv
232.638 182.174 li
232.644 184.417 231.171 186.664 228.223 188.366 cv
cp
f
grestore
224.216 183.315 mo
228.223 188.366 li
234.083 184.983 234.114 179.451 228.292 176.068 cv
222.479 172.69 212.919 172.684 207.06 176.068 cv
211.051 175.664 li
214.669 173.567 220.671 173.57 224.259 175.664 cv
227.871 177.755 227.851 181.224 224.216 183.315 cv
cp
f
gsave
224.216 183.315 mo
228.223 188.366 li
234.083 184.983 234.114 179.451 228.292 176.068 cv
222.479 172.69 212.919 172.684 207.06 176.068 cv
211.051 175.664 li
214.669 173.567 220.671 173.57 224.259 175.664 cv
227.871 177.755 227.851 181.224 224.216 183.315 cv
cp
clp
224.216 183.315 mo
228.223 188.366 li
234.083 184.983 234.114 179.451 228.292 176.068 cv
222.479 172.69 212.919 172.684 207.06 176.068 cv
211.051 175.664 li
214.669 173.567 220.671 173.57 224.259 175.664 cv
227.871 177.755 227.851 181.224 224.216 183.315 cv
cp
f
grestore
211.051 175.664 mo
207.06 176.068 li
191.033 185.321 li
195.025 184.917 li
211.051 175.664 li
cp
.94902 .94902 .94902 rgb
f
208.189 192.568 mo
212.196 197.619 li
228.223 188.366 li
224.216 183.315 li
208.189 192.568 li
cp
.85098 .85098 .85098 rgb
f
212.196 197.619 mo
212.23 209.509 li
228.256 200.257 li
228.223 188.366 li
212.196 197.619 li
cp
f
195.025 184.917 mo
191.391 187.006 191.377 190.483 194.981 192.568 cv
198.579 194.667 204.568 194.667 208.189 192.568 cv
224.216 183.315 li
227.851 181.224 227.871 177.755 224.259 175.664 cv
220.671 173.57 214.669 173.567 211.051 175.664 cv
195.025 184.917 li
cp
.94902 .94902 .94902 rgb
f
186.621 191.513 mo
186.655 203.403 li
186.661 205.619 188.109 207.831 190.998 209.509 cv
196.819 212.892 206.37 212.893 212.23 209.509 cv
212.196 197.619 li
206.336 201.002 196.785 201.002 190.964 197.619 cv
188.075 195.94 186.628 193.728 186.621 191.513 cv
cp
.85098 .85098 .85098 rgb
f
gsave
186.621 191.513 mo
186.655 203.403 li
186.661 205.619 188.109 207.831 190.998 209.509 cv
196.819 212.892 206.37 212.893 212.23 209.509 cv
212.196 197.619 li
206.336 201.002 196.785 201.002 190.964 197.619 cv
188.075 195.94 186.628 193.728 186.621 191.513 cv
cp
clp
186.621 191.513 mo
186.655 203.403 li
186.661 205.619 188.109 207.831 190.998 209.509 cv
196.819 212.892 206.37 212.893 212.23 209.509 cv
212.196 197.619 li
206.336 201.002 196.785 201.002 190.964 197.619 cv
188.075 195.94 186.628 193.728 186.621 191.513 cv
cp
f
grestore
195.025 184.917 mo
191.033 185.321 li
185.173 188.704 185.151 194.241 190.964 197.619 cv
196.785 201.002 206.336 201.002 212.196 197.619 cv
208.189 192.568 li
204.568 194.667 198.579 194.667 194.981 192.568 cv
191.377 190.483 191.391 187.006 195.025 184.917 cv
cp
f
gsave
195.025 184.917 mo
191.033 185.321 li
185.173 188.704 185.151 194.241 190.964 197.619 cv
196.785 201.002 206.336 201.002 212.196 197.619 cv
208.189 192.568 li
204.568 194.667 198.579 194.667 194.981 192.568 cv
191.377 190.483 191.391 187.006 195.025 184.917 cv
cp
clp
195.025 184.917 mo
191.033 185.321 li
190.062 185.881 189.252 186.501 188.601 187.16 cv
193.516 186.057 li
193.92 185.648 194.422 185.263 195.025 184.917 cv
cp
.94902 .94902 .94902 rgb
f
193.516 186.057 mo
188.601 187.16 li
185.645 190.156 186 193.969 189.664 196.756 cv
194.175 192.034 li
191.903 190.307 191.683 187.919 193.516 186.057 cv
cp
f
194.175 192.034 mo
189.664 196.756 li
190.059 197.056 190.492 197.345 190.964 197.619 cv
194.169 199.482 198.504 200.319 202.732 200.131 cv
202.303 194.126 li
199.667 194.242 196.962 193.723 194.981 192.568 cv
194.689 192.398 194.42 192.22 194.175 192.034 cv
cp
f
202.303 194.126 mo
202.732 200.131 li
206.147 199.978 209.492 199.157 212.114 197.666 cv
208.139 192.597 li
206.518 193.522 204.434 194.032 202.303 194.126 cv
cp
.85098 .85098 .85098 rgb
f
208.139 192.597 mo
212.114 197.666 li
212.196 197.619 li
208.189 192.568 li
208.139 192.597 li
cp
f
grestore
200.564 199.754 mo
197.248 198.737 li
204.493 229.437 li
207.81 230.454 li
200.564 199.754 li
cp
.968627 .968627 .968627 rgb
f
223.492 160.752 mo
220.176 159.735 li
216.499 158.608 212.082 159.903 207.824 163.891 cv
211.14 164.907 li
215.399 160.92 219.816 159.625 223.492 160.752 cv
cp
f
gsave
223.492 160.752 mo
220.176 159.735 li
216.499 158.608 212.082 159.903 207.824 163.891 cv
211.14 164.907 li
215.399 160.92 219.816 159.625 223.492 160.752 cv
cp
clp
223.492 160.752 mo
220.176 159.735 li
216.911 158.734 213.062 159.643 209.259 162.652 cv
212.575 163.669 li
216.379 160.661 220.228 159.752 223.492 160.752 cv
cp
f
212.575 163.669 mo
209.259 162.652 li
208.779 163.031 208.301 163.444 207.824 163.891 cv
211.14 164.907 li
211.617 164.461 212.096 164.048 212.575 163.669 cv
cp
f
grestore
211.14 164.907 mo
207.824 163.891 li
199.358 171.817 194.597 187.504 197.248 198.737 cv
200.564 199.754 li
197.913 188.522 202.674 172.834 211.14 164.907 cv
cp
f
gsave
211.14 164.907 mo
207.824 163.891 li
199.358 171.817 194.597 187.504 197.248 198.737 cv
200.564 199.754 li
197.913 188.522 202.674 172.834 211.14 164.907 cv
cp
clp
211.14 164.907 mo
207.824 163.891 li
205.429 166.132 203.331 168.995 201.613 172.202 cv
204.93 173.219 li
206.648 170.012 208.746 167.15 211.14 164.907 cv
cp
f
204.93 173.219 mo
201.613 172.202 li
199.559 176.037 198.049 180.365 197.225 184.713 cv
200.542 185.73 li
201.365 181.382 202.876 177.054 204.93 173.219 cv
cp
f
200.542 185.73 mo
197.225 184.713 li
196.45 188.805 196.284 192.915 196.847 196.649 cv
200.163 197.666 li
199.601 193.932 199.767 189.822 200.542 185.73 cv
cp
f
200.163 197.666 mo
196.847 196.649 li
196.954 197.36 197.087 198.056 197.248 198.737 cv
200.564 199.754 li
200.404 199.074 200.27 198.376 200.163 197.666 cv
cp
f
grestore
211.14 164.907 mo
202.674 172.834 197.913 188.522 200.564 199.754 cv
207.81 230.454 li
243.964 209.392 li
231.351 170.927 li
228.7 159.694 219.606 156.981 211.14 164.907 cv
cp
.85098 .85098 .85098 rgb
f
211.142 233.625 mo
214.515 262.31 li
237.213 275.501 li
236.363 248.282 li
211.142 233.625 li
cp
.74902 .74902 .74902 rgb
f
273.805 266.663 mo
277.021 238.461 li
277.031 242.018 274.697 245.579 270.026 248.277 cv
260.734 253.641 245.586 253.641 236.363 248.282 cv
237.213 275.501 li
245.514 280.325 259.147 280.325 267.51 275.497 cv
271.714 273.069 273.814 269.864 273.805 266.663 cv
cp
f
gsave
273.805 266.663 mo
277.021 238.461 li
277.031 242.018 274.697 245.579 270.026 248.277 cv
260.734 253.641 245.586 253.641 236.363 248.282 cv
237.213 275.501 li
245.514 280.325 259.147 280.325 267.51 275.497 cv
271.714 273.069 273.814 269.864 273.805 266.663 cv
cp
clp
236.363 248.282 mo
237.213 275.501 li
245.514 280.325 259.147 280.325 267.51 275.497 cv
271.714 273.069 273.814 269.864 273.805 266.663 cv
277.021 238.461 li
277.031 242.018 274.697 245.579 270.026 248.277 cv
260.734 253.641 245.586 253.641 236.363 248.282 cv
cp
f
grestore
211.142 233.625 mo
236.363 248.282 li
245.586 253.641 260.734 253.641 270.026 248.277 cv
279.309 242.917 279.359 234.143 270.135 228.783 cv
244.915 214.126 li
211.142 233.625 li
cp
.792157 .792157 .792157 rgb
f
229.544 228.595 mo
229.557 233.22 li
229.553 231.574 230.634 229.925 232.8 228.674 cv
237.093 226.196 244.098 226.196 248.363 228.674 cv
248.35 224.049 li
244.085 221.571 237.08 221.571 232.787 224.049 cv
230.621 225.299 229.54 226.949 229.544 228.595 cv
cp
f
gsave
229.544 228.595 mo
229.557 233.22 li
229.553 231.574 230.634 229.925 232.8 228.674 cv
237.093 226.196 244.098 226.196 248.363 228.674 cv
248.35 224.049 li
244.085 221.571 237.08 221.571 232.787 224.049 cv
230.621 225.299 229.54 226.949 229.544 228.595 cv
cp
clp
229.544 228.595 mo
229.557 233.22 li
229.553 231.574 230.634 229.925 232.8 228.674 cv
237.093 226.196 244.098 226.196 248.363 228.674 cv
248.35 224.049 li
244.085 221.571 237.08 221.571 232.787 224.049 cv
230.621 225.299 229.54 226.949 229.544 228.595 cv
cp
f
grestore
248.35 224.049 mo
248.363 228.674 li
261.374 236.235 li
261.361 231.61 li
248.35 224.049 li
cp
f
264.558 240.711 mo
264.545 236.086 li
264.54 234.462 263.479 232.841 261.361 231.61 cv
261.374 236.235 li
263.493 237.467 264.553 239.088 264.558 240.711 cv
cp
f
gsave
264.558 240.711 mo
264.545 236.086 li
264.54 234.462 263.479 232.841 261.361 231.61 cv
261.374 236.235 li
263.493 237.467 264.553 239.088 264.558 240.711 cv
cp
clp
261.361 231.61 mo
261.374 236.235 li
263.493 237.467 264.553 239.088 264.558 240.711 cv
264.545 236.086 li
264.54 234.462 263.479 232.841 261.361 231.61 cv
cp
f
grestore
207.438 230.48 mo
207.451 235.106 li
234.724 250.955 li
234.711 246.329 li
207.438 230.48 li
cp
f
278.707 240.341 mo
278.693 235.716 li
278.704 239.562 276.18 243.412 271.127 246.33 cv
261.083 252.129 244.698 252.134 234.711 246.329 cv
234.724 250.955 li
244.711 256.759 261.096 256.754 271.14 250.955 cv
276.193 248.038 278.717 244.187 278.707 240.341 cv
cp
f
gsave
278.707 240.341 mo
278.693 235.716 li
278.704 239.562 276.18 243.412 271.127 246.33 cv
261.083 252.129 244.698 252.134 234.711 246.329 cv
234.724 250.955 li
244.711 256.759 261.096 256.754 271.14 250.955 cv
276.193 248.038 278.717 244.187 278.707 240.341 cv
cp
clp
234.711 246.329 mo
234.724 250.955 li
244.711 256.759 261.096 256.754 271.14 250.955 cv
276.193 248.038 278.717 244.187 278.707 240.341 cv
278.693 235.716 li
278.704 239.562 276.18 243.412 271.127 246.33 cv
261.083 252.129 244.698 252.134 234.711 246.329 cv
cp
f
grestore
245.738 240.63 mo
250.003 243.108 257.008 243.108 261.31 240.625 cv
265.603 238.146 265.626 234.089 261.361 231.61 cv
248.35 224.049 li
244.085 221.571 237.08 221.571 232.787 224.049 cv
228.485 226.533 228.462 230.591 232.727 233.069 cv
245.738 240.63 li
cp
271.236 225.241 mo
281.224 231.046 281.171 240.531 271.127 246.33 cv
261.083 252.129 244.698 252.134 234.711 246.329 cv
207.438 230.48 li
243.964 209.392 li
271.236 225.241 li
cp
.968627 .968627 .968627 rgb
f
134.321 243.934 mo
134.206 244.296 134.429 244.376 134.75 244.393 cv
135.006 244.407 135.263 244.393 135.519 244.412 cv
135.551 244.414 136.189 244.489 136.123 244.593 cv
136.042 244.721 135.864 244.783 135.731 244.843 cv
135.542 244.928 135.342 244.982 135.151 245.06 cv
134.982 245.13 134.807 245.159 134.633 245.209 cv
134.445 245.263 134.304 245.299 134.115 245.323 cv
133.969 245.342 133.807 245.418 133.677 245.483 cv
133.415 245.613 133.155 245.834 133.235 246.159 cv
133.348 246.615 133.913 246.448 134.244 246.453 cv
134.434 246.456 135.055 246.225 135.18 246.426 cv
135.297 246.614 134.617 247.052 134.492 247.133 cv
134.003 247.452 133.393 247.687 133.028 248.165 cv
132.798 248.466 132.571 249.01 133.164 248.995 cv
133.552 248.984 133.858 248.753 134.198 248.597 cv
134.636 248.397 135.075 248.21 135.519 248.022 cv
135.628 247.977 136.242 247.649 136.306 247.732 cv
136.187 248.031 li
135.977 248.378 135.756 248.712 135.494 249.02 cv
135.287 249.264 135.041 249.475 134.833 249.719 cv
134.609 249.981 134.017 250.646 134.424 250.984 cv
134.812 251.307 135.568 250.689 135.842 250.447 cv
136.42 249.937 136.996 249.495 137.671 249.114 cv
138.537 248.626 139.485 248.277 140.482 248.355 cv
140.881 248.386 141.392 248.574 141.601 248.931 cv
141.04 249.464 140.35 249.682 139.588 249.992 cv
138.968 250.246 138.373 250.56 138.133 251.224 cv
138.017 251.542 137.788 252.032 138.069 252.326 cv
138.331 252.601 138.745 252.54 139.043 252.359 cv
139.338 252.179 139.564 251.899 139.878 251.748 cv
140.176 251.605 140.479 251.513 140.805 251.446 cv
141.385 251.325 142.003 251.273 142.564 251.096 cv
143.134 250.917 143.642 250.586 144.078 250.182 cv
144.236 250.036 144.376 249.88 144.528 249.73 cv
144.887 249.372 145.287 249.057 145.697 248.755 cv
146.85 247.905 148.521 247.667 149.821 247.022 cv
150.994 246.44 150.333 245.303 149.766 244.394 cv
149.28 243.612 148.741 243.255 147.863 243.072 cv
147.08 242.909 146.315 243.054 145.538 243.025 cv
144.999 243.005 144.433 242.911 143.899 242.833 cv
143.707 242.804 143.514 242.778 143.323 242.745 cv
142.677 242.634 142.025 242.554 141.373 242.483 cv
140.534 242.392 139.685 242.381 138.844 242.446 cv
138.036 242.509 137.283 242.726 136.488 242.852 cv
136.275 242.885 136.063 242.911 135.85 242.942 cv
135.256 243.029 134.521 243.301 134.321 243.934 cv
cp
1 .780392 .678431 rgb
f
145.333 246.259 mo
145.342 245.668 145.438 245.077 145.534 244.491 cv
145.67 243.658 145.935 243.02 146.798 242.83 cv
148.897 242.37 151.003 241.969 153.109 241.569 cv
154.065 241.387 155.021 241.206 155.979 241.055 cv
158.789 240.616 161.619 240.453 164.424 240.567 cv
165.511 240.611 167.315 240.648 168.252 241.252 cv
169.18 241.849 169.401 242.977 169.4 244.127 cv
169.4 246.182 168.646 248.29 166.817 249.301 cv
164.984 250.317 163.034 250.222 161.09 250.215 cv
158.521 250.205 155.952 250.102 153.39 249.903 cv
152.132 249.805 150.825 249.537 149.567 249.535 cv
148.476 249.533 147.331 249.701 146.397 248.969 cv
145.767 248.476 145.443 247.673 145.359 246.877 cv
145.337 246.671 145.33 246.465 145.333 246.259 cv
cp
.968627 .933333 .917647 rgb
f
gsave
139.253 240.539 mo
139.207 257.068 li
139.205 257.545 138.892 258.021 138.266 258.385 cv
137.006 259.117 134.961 259.117 133.695 258.387 cv
133.057 258.018 132.738 257.535 132.739 257.052 cv
132.786 240.523 li
132.785 241.005 133.104 241.488 133.742 241.857 cv
135.007 242.588 137.053 242.588 138.313 241.855 cv
138.939 241.492 139.252 241.016 139.253 240.539 cv
cp
clp
139.253 240.539 mo
139.207 257.068 li
139.205 257.545 138.892 258.021 138.266 258.385 cv
138.012 258.532 137.725 258.651 137.419 258.739 cv
137.466 242.209 li
137.772 242.121 138.059 242.003 138.313 241.855 cv
138.939 241.492 139.252 241.016 139.253 240.539 cv
cp
.384314 .372549 .427451 rgb
f
137.466 242.209 mo
137.419 258.739 li
136.901 258.888 136.328 258.952 135.762 258.93 cv
135.809 242.4 li
136.375 242.423 136.948 242.359 137.466 242.209 cv
cp
.478431 .466667 .533333 rgb
f
135.809 242.4 mo
135.762 258.93 li
135.146 258.906 134.539 258.78 134.022 258.552 cv
134.069 242.023 li
134.585 242.25 135.193 242.377 135.809 242.4 cv
cp
.576471 .560784 .639216 rgb
f
134.069 242.023 mo
134.022 258.552 li
133.908 258.502 133.799 258.446 133.695 258.387 cv
133.373 258.201 133.133 257.985 132.973 257.756 cv
133.02 241.227 li
133.179 241.456 133.42 241.671 133.742 241.857 cv
133.846 241.917 133.955 241.972 134.069 242.023 cv
cp
.478431 .466667 .533333 rgb
f
133.02 241.227 mo
132.973 257.756 li
132.816 257.531 132.739 257.291 132.739 257.052 cv
132.786 240.523 li
132.785 240.762 132.863 241.001 133.02 241.227 cv
cp
.384314 .372549 .427451 rgb
f
grestore
138.302 239.207 mo
139.567 239.938 139.571 241.125 138.313 241.855 cv
137.053 242.588 135.007 242.588 133.742 241.857 cv
132.473 241.125 132.467 239.94 133.727 239.207 cv
134.984 238.477 137.033 238.475 138.302 239.207 cv
cp
.415686 .403922 .462745 rgb
f
gsave
140.047 227.205 mo
140 243.734 li
139.999 244.327 139.609 244.919 138.831 245.371 cv
137.262 246.283 134.713 246.283 133.137 245.373 cv
132.342 244.914 131.946 244.312 131.947 243.711 cv
131.994 227.182 li
131.992 227.782 132.389 228.384 133.184 228.843 cv
134.76 229.753 137.309 229.753 138.878 228.841 cv
139.656 228.389 140.046 227.797 140.047 227.205 cv
cp
clp
140.047 227.205 mo
140 243.734 li
139.999 244.327 139.609 244.919 138.831 245.371 cv
138.514 245.555 138.158 245.702 137.777 245.812 cv
137.824 229.282 li
138.205 229.172 138.561 229.025 138.878 228.841 cv
139.656 228.389 140.046 227.797 140.047 227.205 cv
cp
.74902 .74902 .74902 rgb
f
137.824 229.282 mo
137.777 245.812 li
137.131 245.998 136.417 246.077 135.713 246.049 cv
135.76 229.52 li
136.464 229.548 137.178 229.468 137.824 229.282 cv
cp
.85098 .85098 .85098 rgb
f
135.76 229.52 mo
135.713 246.049 li
134.944 246.019 134.188 245.862 133.545 245.578 cv
133.592 229.049 li
134.235 229.333 134.991 229.49 135.76 229.52 cv
cp
.94902 .94902 .94902 rgb
f
133.592 229.049 mo
133.545 245.578 li
133.403 245.516 133.267 245.447 133.137 245.373 cv
132.737 245.141 132.437 244.874 132.239 244.588 cv
132.286 228.058 li
132.484 228.344 132.783 228.612 133.184 228.843 cv
133.314 228.918 133.45 228.987 133.592 229.049 cv
cp
.85098 .85098 .85098 rgb
f
132.286 228.058 mo
132.239 244.588 li
132.044 244.307 131.947 244.009 131.947 243.711 cv
131.994 227.182 li
131.993 227.48 132.091 227.778 132.286 228.058 cv
cp
.74902 .74902 .74902 rgb
f
grestore
138.859 225.545 mo
140.436 226.455 140.444 227.931 138.878 228.841 cv
137.309 229.753 134.76 229.753 133.184 228.843 cv
131.605 227.931 131.596 226.455 133.166 225.543 cv
134.732 224.633 137.28 224.633 138.859 225.545 cv
cp
f
113.596 220.27 mo
113.596 229.72 li
101.488 229.72 li
107.929 238.03 118 243.383 129.33 243.383 cv
144.528 243.383 157.466 233.756 162.406 220.27 cv
113.596 220.27 li
cp
.74902 .74902 .74902 rgb
f
162.982 210.358 mo
162.965 216.557 li
162.95 221.947 159.804 226.996 153.352 230.745 cv
141.435 237.671 121.823 238.079 104.965 232.588 cv
103.964 232.263 103.08 231.871 102.314 231.429 cv
99.9736 230.078 98.7515 228.258 98.7568 226.424 cv
98.7744 220.226 li
98.7693 222.059 99.9915 223.88 102.332 225.231 cv
103.097 225.673 103.982 226.064 104.983 226.39 cv
121.841 231.88 141.453 231.472 153.37 224.547 cv
159.822 220.798 162.967 215.748 162.982 210.358 cv
cp
.792157 .792157 .792157 rgb
f
gsave
162.982 210.358 mo
162.965 216.557 li
162.95 221.947 159.804 226.996 153.352 230.745 cv
141.435 237.671 121.823 238.079 104.965 232.588 cv
103.964 232.263 103.08 231.871 102.314 231.429 cv
99.9736 230.078 98.7515 228.258 98.7568 226.424 cv
98.7744 220.226 li
98.7693 222.059 99.9915 223.88 102.332 225.231 cv
103.097 225.673 103.982 226.064 104.983 226.39 cv
121.841 231.88 141.453 231.472 153.37 224.547 cv
159.822 220.798 162.967 215.748 162.982 210.358 cv
cp
clp
162.982 210.358 mo
162.965 216.557 li
162.95 221.947 159.804 226.996 153.352 230.745 cv
148.55 233.537 142.497 235.269 135.878 235.983 cv
135.896 229.785 li
142.515 229.071 148.567 227.338 153.37 224.547 cv
159.822 220.798 162.967 215.748 162.982 210.358 cv
cp
f
135.896 229.785 mo
135.878 235.983 li
126.075 237.042 115.029 235.866 104.965 232.588 cv
104.198 232.339 103.5 232.051 102.87 231.731 cv
102.888 225.532 li
103.517 225.852 104.216 226.14 104.983 226.39 cv
115.047 229.667 126.092 230.843 135.896 229.785 cv
cp
f
102.888 225.532 mo
102.87 231.731 li
102.678 231.633 102.493 231.533 102.314 231.429 cv
99.9736 230.078 98.7515 228.258 98.7568 226.424 cv
98.7744 220.226 li
98.7693 222.059 99.9915 223.88 102.332 225.231 cv
102.51 225.334 102.696 225.435 102.888 225.532 cv
cp
f
grestore
154.386 194.985 mo
155.149 195.425 155.828 195.936 156.393 196.513 cv
165.923 206.262 165.287 217.622 153.37 224.547 cv
141.453 231.472 121.841 231.88 104.983 226.39 cv
103.982 226.064 103.097 225.673 102.332 225.231 cv
97.738 222.579 97.4521 218.119 102.301 215.301 cv
137.238 194.998 li
142.088 192.18 149.79 192.331 154.386 194.985 cv
cp
.968627 .968627 .968627 rgb
f
128.699 227.628 mo
121.026 227.628 113.096 226.367 105.767 223.98 cv
104.956 223.716 104.227 223.398 103.599 223.035 cv
102.166 222.208 101.31 221.163 101.309 220.24 cv
101.308 219.332 102.134 218.33 103.574 217.493 cv
138.511 197.19 li
140.415 196.083 143 195.473 145.79 195.473 cv
148.569 195.473 151.241 196.095 153.118 197.18 cv
153.698 197.514 154.191 197.887 154.582 198.286 cv
158.887 202.69 160.935 207.497 160.347 211.819 cv
159.793 215.898 156.939 219.541 152.096 222.356 cv
146.246 225.756 137.937 227.628 128.699 227.628 cv
cp
.74902 .74902 .74902 rgb
f
162.406 209.68 mo
162.389 215.878 li
162.374 221.268 159.229 226.317 152.776 230.067 cv
140.859 236.992 121.247 237.4 104.389 231.91 cv
103.388 231.584 102.503 231.192 101.738 230.75 cv
99.3977 229.399 98.1755 227.579 98.1809 225.746 cv
98.1982 219.547 li
98.1934 221.381 99.4153 223.201 101.756 224.552 cv
102.521 224.994 103.406 225.386 104.407 225.711 cv
121.265 231.201 140.877 230.794 152.794 223.869 cv
159.246 220.119 162.391 215.07 162.406 209.68 cv
cp
.792157 .792157 .792157 rgb
f
gsave
162.406 209.68 mo
162.389 215.878 li
162.374 221.268 159.229 226.317 152.776 230.067 cv
140.859 236.992 121.247 237.4 104.389 231.91 cv
103.388 231.584 102.503 231.192 101.738 230.75 cv
99.3977 229.399 98.1755 227.579 98.1809 225.746 cv
98.1982 219.547 li
98.1934 221.381 99.4153 223.201 101.756 224.552 cv
102.521 224.994 103.406 225.386 104.407 225.711 cv
121.265 231.201 140.877 230.794 152.794 223.869 cv
159.246 220.119 162.391 215.07 162.406 209.68 cv
cp
clp
162.406 209.68 mo
162.389 215.878 li
162.374 221.268 159.229 226.317 152.776 230.067 cv
147.974 232.858 141.921 234.59 135.302 235.305 cv
135.32 229.106 li
141.938 228.392 147.991 226.66 152.794 223.869 cv
159.246 220.119 162.391 215.07 162.406 209.68 cv
cp
f
135.32 229.106 mo
135.302 235.305 li
125.499 236.363 114.453 235.187 104.389 231.91 cv
103.622 231.66 102.923 231.372 102.294 231.052 cv
102.312 224.853 li
102.941 225.174 103.64 225.462 104.407 225.711 cv
114.471 228.989 125.516 230.164 135.32 229.106 cv
cp
f
102.312 224.853 mo
102.294 231.052 li
102.103 230.954 101.917 230.854 101.738 230.75 cv
99.3977 229.399 98.1755 227.579 98.1809 225.746 cv
98.1982 219.547 li
98.1934 221.381 99.4153 223.201 101.756 224.552 cv
101.935 224.655 102.12 224.756 102.312 224.853 cv
cp
f
grestore
153.81 194.306 mo
154.573 194.747 155.252 195.258 155.817 195.835 cv
165.347 205.583 164.711 216.943 152.794 223.869 cv
140.877 230.794 121.265 231.201 104.407 225.711 cv
103.406 225.386 102.521 224.994 101.756 224.552 cv
97.1621 221.9 96.8762 217.44 101.725 214.622 cv
136.662 194.319 li
141.512 191.501 149.214 191.653 153.81 194.306 cv
cp
.968627 .968627 .968627 rgb
f
128.123 226.949 mo
120.45 226.949 112.52 225.688 105.191 223.301 cv
104.38 223.037 103.651 222.719 103.023 222.357 cv
101.59 221.53 100.734 220.484 100.733 219.561 cv
100.732 218.653 101.558 217.651 102.998 216.814 cv
137.935 196.511 li
139.839 195.404 142.424 194.795 145.214 194.795 cv
147.993 194.795 150.665 195.416 152.542 196.501 cv
153.122 196.835 153.615 197.208 154.006 197.608 cv
158.311 202.012 160.359 206.818 159.771 211.141 cv
159.217 215.219 156.363 218.863 151.52 221.677 cv
145.67 225.077 137.361 226.949 128.123 226.949 cv
cp
.74902 .74902 .74902 rgb
f
186.306 305.609 mo
185.87 305.751 185.475 305.905 185.04 306.002 cv
184.587 306.103 184.212 306.35 183.961 306.747 cv
183.656 307.229 183.566 307.815 183.526 308.384 cv
183.452 309.425 183.524 310.476 183.734 311.498 cv
183.849 312.063 184.062 312.581 184.219 313.126 cv
184.381 313.684 184.503 314.153 185.034 314.487 cv
185.788 314.963 186.764 314.863 187.562 315.251 cv
188.35 315.636 188.92 316.334 189.27 317.124 cv
190.358 319.581 190.113 322.636 191.849 324.687 cv
192.331 325.258 192.962 325.72 193.684 325.912 cv
194.407 326.104 196.391 326.097 196.991 325.652 cv
197.939 324.95 196.978 323.536 197.008 322.357 cv
197.093 319.117 196.42 315.913 195.418 312.845 cv
194.911 311.291 194.319 309.765 193.691 308.255 cv
193.381 307.51 193.062 306.769 192.739 306.029 cv
192.535 305.563 192.344 304.734 191.827 304.51 cv
191.181 304.23 189.878 304.744 189.222 304.889 cv
188.274 305.099 187.255 305.302 186.306 305.609 cv
cp
.133333 .133333 .160784 rgb
f
195.168 305.305 mo
195.906 306.177 196.162 307.359 196.234 308.499 cv
196.305 309.639 196.218 310.79 196.38 311.921 cv
196.594 313.411 197.232 314.802 197.858 316.171 cv
198.483 317.54 199.111 318.937 199.301 320.431 cv
199.492 321.924 199.125 323.881 198.085 324.969 cv
197.046 326.058 195.181 326.399 194 325.467 cv
193.179 324.82 192.895 323.415 192.719 322.385 cv
192.116 318.836 192.981 315.084 191.893 311.652 cv
191.471 310.322 190.763 309.071 190.585 307.687 cv
190.441 306.569 190.812 304.825 192.003 304.35 cv
193.04 303.937 194.489 304.501 195.168 305.305 cv
cp
.25098 .25098 .301961 rgb
f
173.1 296.077 mo
173.802 295.248 174.256 294.291 174.064 293.339 cv
173.894 292.489 172.728 291.69 172.159 291.073 cv
171.251 290.085 170.317 289.115 169.267 288.276 cv
167.524 286.884 166.427 285.637 165.759 283.427 cv
165.165 281.463 164.935 279.389 164.178 277.481 cv
162.933 274.346 160.231 271.824 157.017 270.8 cv
154.365 269.955 151.245 270.185 149.094 271.95 cv
147.71 273.087 146.884 274.823 146.738 276.595 cv
146.445 280.169 149.095 283.382 151.171 286.018 cv
153.348 288.782 155.707 291.551 158.396 293.835 cv
159.183 294.504 159.961 295.186 160.743 295.862 cv
161.829 296.801 163.634 299.011 165 299.402 cv
166.377 299.797 168.943 298.847 170.188 298.28 cv
171.058 297.884 172.258 297.073 173.1 296.077 cv
cp
.145098 .290196 .623529 rgb
f
181.484 276.322 mo
182.463 276.885 183.291 277.692 184.25 278.254 cv
184.89 278.629 185.794 278.7 186.227 279.385 cv
186.558 279.908 186.626 280.552 186.646 281.171 cv
186.757 284.783 185.407 288.421 182.964 291.085 cv
181.015 293.211 178.348 294.748 175.517 295.327 cv
172.745 295.893 169.76 293.415 167.474 291.997 cv
160.881 287.907 147.571 286.554 151.708 274.222 cv
152.072 273.139 152.637 271.912 153.482 271.203 cv
156.854 268.373 170.277 273.727 171.772 274.069 cv
174.03 274.586 176.195 275.138 178.489 275.334 cv
179.544 275.424 180.556 275.788 181.484 276.322 cv
cp
f
184.078 275.417 mo
187.953 275.417 li
187.656 274.278 187.433 273.126 187.373 271.953 cv
187.213 268.821 186.335 265.708 186.139 262.553 cv
186.082 261.641 186.045 260.728 186.033 259.813 cv
185.975 255.428 186.461 251.043 186.183 246.66 cv
185.963 243.211 185.478 238.801 181.814 237.288 cv
180.336 236.678 178.666 236.649 177.098 236.963 cv
175.286 237.325 173.593 238.119 171.921 238.907 cv
170.66 239.501 169.399 240.095 168.138 240.689 cv
167.061 241.197 165.923 241.585 164.932 242.232 cv
162.854 243.589 160.902 245.18 159.321 247.1 cv
158.558 248.026 157.898 249.04 157.394 250.129 cv
156.936 251.116 156.351 252.487 156.431 253.602 cv
156.633 256.294 157.318 258.835 158.072 261.415 cv
158.24 261.99 158.405 262.566 158.554 263.145 cv
159.464 266.692 160.373 270.239 161.283 273.785 cv
162.465 278.39 163.65 282.999 165.052 287.54 cv
184.078 287.54 li
184.078 275.417 li
cp
.854902 .862745 .901961 rgb
f
165.139 239.134 mo
164.826 237.866 163.884 238.259 164.261 237.045 cv
164.582 236.014 165.127 235.041 165.913 234.302 cv
166.699 233.562 167.736 233.068 168.814 233.023 cv
169.186 233.008 169.454 233.196 169.821 233.161 cv
170.833 233.066 171.832 232.774 172.857 232.822 cv
173.877 232.871 174.813 232.853 174.923 233.988 cv
175.026 235.059 174.988 236.378 175.411 237.384 cv
175.766 238.229 176.136 238.988 176.334 239.888 cv
176.505 240.664 176.165 241.334 175.626 241.912 cv
175.172 242.4 174.607 242.769 174.036 243.112 cv
172.736 243.893 171.349 244.578 169.857 244.849 cv
168.874 245.027 167.842 245.013 166.878 244.738 cv
166.504 244.631 165.805 244.457 165.556 244.135 cv
165.274 243.77 165.379 243.025 165.389 242.601 cv
165.415 241.431 165.422 240.279 165.139 239.134 cv
cp
1 .780392 .678431 rgb
f
159.226 223.099 mo
158.687 223.901 158.292 224.783 158.241 225.777 cv
158.127 227.992 159.224 230.151 158.961 232.364 cv
158.705 234.508 160.068 239.187 164.327 240.007 cv
166.481 240.422 170.543 239.297 171.812 238.53 cv
173.513 237.502 174.522 235.659 175.415 233.882 cv
182.728 219.313 164.397 215.393 159.226 223.099 cv
cp
f
176.492 218.699 mo
176.03 218.308 175.48 217.987 174.825 217.756 cv
174.626 217.686 174.416 217.623 174.265 217.476 cv
174.154 217.365 174.087 217.219 174.007 217.084 cv
173.651 216.48 173.02 216.09 172.377 215.81 cv
169.946 214.75 167.143 214.961 164.566 215.59 cv
163.696 215.803 162.829 216.064 162.043 216.495 cv
161.148 216.987 160.383 217.687 159.701 218.449 cv
158.739 219.527 157.847 220.77 157.429 222.169 cv
157.284 222.654 157.254 223.16 157.197 223.66 cv
157.138 224.171 157.088 224.676 157.235 225.181 cv
157.332 225.511 157.516 225.823 157.79 226.031 cv
158.106 226.269 158.512 226.352 158.849 226.559 cv
159.2 226.774 159.461 227.116 159.644 227.485 cv
159.904 228.009 160.034 228.587 160.166 229.151 cv
160.301 229.734 160.394 230.326 160.471 230.919 cv
160.517 231.261 160.558 231.609 160.7 231.923 cv
160.936 232.447 161.481 232.725 162.019 232.845 cv
162.632 232.981 163.072 233.249 163.442 233.774 cv
163.78 234.254 163.995 234.807 164.294 235.311 cv
165.332 237.068 167.374 238.118 169.413 238.17 cv
171.093 238.212 172.746 237.626 174.115 236.673 cv
174.722 236.252 175.156 235.695 175.628 235.133 cv
176.17 234.486 176.592 233.75 177.006 233.018 cv
177.638 231.901 178.278 230.76 178.546 229.504 cv
178.698 228.796 178.729 228.068 178.758 227.345 cv
178.878 224.412 178.82 220.669 176.492 218.699 cv
cp
.192157 .152941 .14902 rgb
f
162.641 229.243 mo
164.025 228.798 164.817 230.456 164.186 232.046 cv
164.002 232.509 163.591 232.983 163.3 233.389 cv
161.312 236.163 160.101 233.998 160.721 233.067 cv
162.159 230.906 160.901 229.803 162.641 229.243 cv
cp
1 .780392 .678431 rgb
f
162.83 232.007 mo
162.955 231.819 164.323 230.473 163.071 230.1 cv
162.724 229.997 162.453 230.346 162.486 230.678 cv
162.503 230.85 162.598 231.007 162.614 231.18 cv
162.624 231.281 162.605 231.384 162.574 231.481 cv
162.491 231.749 162.059 232.092 162.239 232.408 cv
162.398 232.688 162.758 232.115 162.83 232.007 cv
cp
.952941 .662745 .517647 rgb
f
182.373 263.987 mo
182.305 254.937 182.448 246.675 179.121 236.766 cv
179.357 236.703 180.241 236.855 180.408 236.861 cv
183.303 246.577 183.464 255.742 183.629 263.824 cv
182.373 263.987 li
cp
.101961 .478431 .803922 rgb
f
177.474 293.421 mo
177.314 293.348 177.155 293.27 176.999 293.184 cv
175.403 292.308 173.717 292.292 171.914 292.183 cv
171.242 292.141 170.533 292.108 169.93 292.408 cv
168.555 293.091 168.511 295.169 169.396 296.423 cv
169.806 297.004 170.354 297.474 170.797 298.03 cv
171.638 299.087 172.432 300.794 171.875 302.144 cv
171.126 303.958 169.583 305.67 168.635 307.418 cv
168.265 308.099 167.902 308.815 167.861 309.589 cv
167.765 311.413 170.035 313.012 171.673 313.108 cv
172.684 313.168 173.662 312.687 174.444 312.042 cv
175.617 311.075 176.723 309.595 177.261 308.174 cv
177.839 306.65 178.643 305.31 179.911 304.256 cv
182.088 302.448 184.92 300.486 183.879 297.148 cv
183.602 296.257 182.891 295.552 182.082 295.086 cv
180.648 294.26 178.966 294.092 177.474 293.421 cv
cp
.133333 .133333 .160784 rgb
f
189.036 280.088 mo
189.07 279.443 189.066 278.758 188.734 278.204 cv
186.945 275.215 182.81 278.167 180.862 279.121 cv
179.662 279.708 178.176 280.304 176.836 280.43 cv
175.428 280.564 174.022 281.011 172.639 281.348 cv
171.366 281.658 170.084 281.97 168.776 282.051 cv
166.822 282.172 164.876 281.775 162.958 281.38 cv
163.269 281.591 162.263 282.954 162.076 283.28 cv
161.657 284.013 161.242 284.748 160.83 285.485 cv
160.008 286.96 159.2 288.443 158.408 289.935 cv
156.824 292.918 155.303 295.934 153.846 298.982 cv
152.966 300.822 151.994 302.678 151.334 304.601 cv
150.669 306.541 149.836 308.27 149.615 310.349 cv
149.338 313.009 149.936 315.846 151.68 317.874 cv
153.085 319.508 156.231 321.147 158.423 320.112 cv
160.76 319.009 161.242 315.38 162.408 313.344 cv
163.502 311.433 164.839 309.673 166.224 307.965 cv
168.694 304.921 171.053 302.045 173.959 299.387 cv
176.502 297.06 179.185 294.887 181.99 292.883 cv
184.583 291.031 186.755 288.445 187.944 285.439 cv
188.616 283.739 188.94 281.914 189.036 280.088 cv
cp
.101961 .478431 .803922 rgb
f
164.962 289.617 mo
165.223 289.732 165.489 289.838 165.757 289.936 cv
167.938 290.731 170.23 291.154 172.507 291.568 cv
174.48 291.927 175.842 292.628 177.879 292.212 cv
181.658 291.44 185.117 289.079 187.113 285.765 cv
191.068 279.197 187.87 271.866 185.288 265.47 cv
184.506 263.534 183.522 260.706 183.522 260.706 cv
183.522 260.706 179.516 262.529 178.573 263.036 cv
178.811 265.917 178.614 270.936 178.369 272.341 cv
176.309 284.188 163.287 281.568 163.256 281.323 cv
163.399 282.453 164.812 288.488 164.962 289.617 cv
cp
f
162.494 243.95 mo
167.546 248.374 175.035 255.646 179.932 262.915 cv
178.958 263.585 li
169.013 251.753 167.455 250.473 161.28 245.04 cv
161.579 244.814 162.243 244.069 162.494 243.95 cv
cp
f
154.33 319.752 mo
153.047 319.152 151.891 317.962 151.77 316.253 cv
151.707 315.368 152.011 314.432 152.49 313.655 cv
153.802 311.525 155.468 308.799 157.504 308.197 cv
159.02 307.749 160.594 307.483 162.151 307.223 cv
167.065 306.403 172.034 305.866 176.998 305.46 cv
179.271 305.273 181.549 305.117 183.83 305.052 cv
185.381 305.009 185.719 305.239 186.475 306.712 cv
187.207 308.139 187.618 309.729 187.693 311.33 cv
187.784 313.301 187.648 316.461 185.269 316.903 cv
176.88 318.462 168.469 320.023 160.099 320.46 cv
158.259 320.557 156.399 320.545 154.698 319.907 cv
154.575 319.861 154.452 319.809 154.33 319.752 cv
cp
f
129.461 255.293 mo
129.454 254.585 129.505 253.872 129.654 253.179 cv
129.712 252.911 129.819 252.638 129.85 252.372 cv
129.882 252.084 129.901 251.843 130.224 251.717 cv
130.488 251.613 130.794 251.675 131.043 251.809 cv
131.294 251.943 131.502 252.142 131.716 252.328 cv
132.064 252.629 132.435 252.903 132.826 253.147 cv
133.032 253.274 133.253 253.397 133.496 253.406 cv
133.877 253.419 134.205 253.15 134.47 252.876 cv
134.857 252.475 135.197 252.027 135.478 251.546 cv
135.571 251.387 135.661 251.221 135.798 251.096 cv
135.934 250.972 136.132 250.896 136.306 250.956 cv
136.522 251.03 136.625 251.27 136.702 251.484 cv
137 252.306 137.297 253.128 137.595 253.949 cv
137.862 254.686 138.305 255.357 138.622 256.083 cv
138.76 256.398 138.894 256.717 139.007 257.042 cv
139.37 258.087 139.978 257.969 142.673 260.159 cv
144.848 261.926 138.956 265.746 136.951 263.991 cv
136.278 263.402 135.531 262.507 135.299 262.218 cv
134.994 261.836 133.871 260.135 133.453 259.909 cv
132.973 259.648 132.52 259.335 132.09 258.999 cv
131.844 258.807 131.605 258.606 131.375 258.395 cv
130.534 257.625 129.472 256.531 129.461 255.293 cv
cp
1 .780392 .678431 rgb
f
142.868 269.787 mo
144.15 270.843 145.463 271.862 146.784 272.868 cv
148.084 273.858 149.321 274.733 150.938 275.133 cv
152.518 275.523 153.762 275.225 155.025 274.265 cv
156.881 272.852 158.785 271.192 160.191 269.328 cv
161.729 267.29 162.958 264.895 164.185 262.661 cv
165.05 261.087 165.878 259.479 166.412 257.764 cv
166.945 256.049 167.173 254.208 166.82 252.447 cv
166.411 250.407 165.072 248.39 163.175 247.458 cv
162.727 247.237 162.249 247.082 161.754 247.009 cv
158.879 246.583 157.185 248.925 156.103 251.233 cv
155.304 252.937 154.804 254.76 154.397 256.592 cv
153.979 258.471 153.518 260.327 152.922 262.162 cv
152.764 262.649 152.599 263.133 152.427 263.616 cv
152.281 264.029 151.941 265.119 151.359 264.997 cv
150.49 264.815 149.854 264.369 149.113 263.89 cv
148.281 263.353 147.455 262.807 146.635 262.251 cv
145.13 261.23 143.64 260.187 142.151 259.143 cv
140.886 258.255 139.443 256.78 137.751 257.231 cv
136.898 257.459 136.256 258.145 135.678 258.813 cv
135.016 259.579 134.599 260.636 135.004 261.637 cv
135.172 262.053 135.45 262.415 135.732 262.766 cv
135.75 262.788 li
137.842 265.388 140.298 267.669 142.868 269.787 cv
cp
.988235 .980392 .980392 rgb
f
133.784 189.624 mo
133.784 190.398 133.152 191.03 132.378 191.03 cv
131.591 191.03 130.972 190.398 130.972 189.624 cv
130.972 186.91 128.99 183.494 126.641 182.144 cv
125.826 181.665 125.066 181.525 124.574 181.764 cv
124.504 181.792 li
124.012 182.073 123.731 182.819 123.731 183.817 cv
123.731 203.952 li
122.55 204.627 li
122.437 204.698 li
121.804 204.332 li
120.918 203.826 li
120.918 183.817 li
120.918 183.564 120.932 183.311 120.96 183.072 cv
120.975 182.889 121.003 182.72 121.031 182.552 cv
121.045 182.453 121.059 182.369 121.087 182.284 cv
121.143 182.031 121.213 181.778 121.312 181.553 cv
121.368 181.398 121.425 181.258 121.495 181.131 cv
121.579 180.934 121.692 180.752 121.804 180.583 cv
121.875 180.47 121.959 180.358 122.057 180.259 cv
122.353 179.894 122.704 179.584 123.098 179.36 cv
124.49 178.558 126.29 178.685 128.048 179.697 cv
131.267 181.553 133.784 185.912 133.784 189.624 cv
cp
.392157 .388235 .439216 rgb
f
124.574 181.764 mo
124.504 181.792 li
124.012 182.073 123.731 182.819 123.731 183.817 cv
123.731 203.952 li
122.55 204.627 li
122.55 183.817 li
122.55 182.819 122.831 182.073 123.323 181.792 cv
123.646 181.609 124.068 181.595 124.574 181.764 cv
cp
.317647 .313726 .396078 rgb
f
122.057 180.259 mo
121.888 181.131 121.804 182.186 121.804 182.748 cv
121.804 204.332 li
120.918 203.826 li
120.918 183.817 li
120.918 183.564 120.932 183.311 120.96 183.072 cv
120.975 182.889 121.003 182.72 121.031 182.552 cv
121.045 182.453 121.059 182.369 121.087 182.284 cv
121.143 182.031 121.213 181.778 121.312 181.553 cv
121.368 181.398 121.425 181.258 121.495 181.131 cv
121.579 180.934 121.692 180.752 121.804 180.583 cv
121.875 180.47 121.959 180.358 122.057 180.259 cv
cp
.576471 .560784 .639216 rgb
f
133.784 189.624 mo
133.784 190.398 133.152 191.03 132.378 191.03 cv
131.675 191.03 131.098 190.524 131 189.849 cv
131.492 189.624 131.844 189.132 131.844 188.556 cv
131.844 185.167 129.749 181.244 126.95 179.191 cv
127.316 179.317 127.682 179.486 128.048 179.697 cv
131.267 181.553 133.784 185.912 133.784 189.624 cv
cp
.317647 .313726 .396078 rgb
f
122.057 180.259 mo
121.888 181.131 121.804 182.186 121.804 182.748 cv
121.804 204.332 li
120.918 203.826 li
120.918 183.817 li
120.918 183.564 120.932 183.311 120.96 183.072 cv
120.975 182.889 121.003 182.72 121.031 182.552 cv
121.045 182.453 121.059 182.369 121.087 182.284 cv
121.143 182.031 121.213 181.778 121.312 181.553 cv
121.368 181.398 121.425 181.258 121.495 181.131 cv
121.579 180.934 121.692 180.752 121.804 180.583 cv
121.875 180.47 121.959 180.358 122.057 180.259 cv
cp
.576471 .560784 .639216 rgb
f
gsave
116.746 204.269 mo
120.71 201.966 li
120.928 201.839 121.229 201.855 121.562 202.047 cv
117.597 204.351 li
117.265 204.159 116.964 204.142 116.746 204.269 cv
cp
clp
116.746 204.269 mo
120.71 201.966 li
120.924 201.841 121.217 201.855 121.542 202.036 cv
117.577 204.339 li
117.253 204.158 116.96 204.145 116.746 204.269 cv
cp
.360784 .34902 .4 rgb
f
117.577 204.339 mo
121.542 202.036 li
121.562 202.047 li
117.597 204.351 li
117.577 204.339 li
cp
.431373 .419608 .478431 rgb
f
grestore
gsave
122.409 204.906 mo
118.445 207.21 li
118.661 207.084 118.795 206.817 118.796 206.438 cv
118.798 205.674 118.261 204.734 117.597 204.351 cv
121.562 202.047 li
122.226 202.431 122.762 203.371 122.76 204.134 cv
122.76 204.513 122.625 204.78 122.409 204.906 cv
cp
clp
117.597 204.351 mo
121.562 202.047 li
121.664 202.107 121.764 202.179 121.86 202.263 cv
117.896 204.566 li
117.8 204.483 117.7 204.41 117.597 204.351 cv
cp
.431373 .419608 .478431 rgb
f
117.896 204.566 mo
121.86 202.263 li
121.961 202.352 122.058 202.453 122.147 202.563 cv
118.183 204.867 li
118.094 204.757 117.997 204.655 117.896 204.566 cv
cp
.505882 .490196 .560784 rgb
f
118.183 204.867 mo
122.147 202.563 li
122.246 202.684 122.335 202.816 122.414 202.954 cv
118.45 205.258 li
118.371 205.12 118.282 204.988 118.183 204.867 cv
cp
.576471 .560784 .639216 rgb
f
118.45 205.258 mo
122.414 202.954 li
122.511 203.124 122.592 203.304 122.65 203.485 cv
118.686 205.789 li
118.628 205.608 118.547 205.428 118.45 205.258 cv
cp
.701961 .694118 .74902 rgb
f
118.686 205.789 mo
122.65 203.485 li
122.712 203.677 122.75 203.869 122.759 204.053 cv
118.795 206.357 li
118.786 206.173 118.748 205.98 118.686 205.789 cv
cp
.576471 .560784 .639216 rgb
f
118.795 206.357 mo
122.759 204.053 li
122.76 204.134 li
122.76 204.237 122.75 204.333 122.731 204.419 cv
118.767 206.722 li
118.786 206.636 118.796 206.541 118.796 206.438 cv
118.795 206.357 li
cp
.505882 .490196 .560784 rgb
f
118.767 206.722 mo
122.731 204.419 li
122.707 204.527 122.669 204.622 122.619 204.701 cv
118.655 207.004 li
118.705 206.925 118.743 206.831 118.767 206.722 cv
cp
.431373 .419608 .478431 rgb
f
118.655 207.004 mo
122.619 204.701 li
122.409 204.906 li
118.445 207.21 li
118.655 207.004 li
cp
.360784 .34902 .4 rgb
f
grestore
117.597 204.351 mo
118.261 204.734 118.798 205.674 118.796 206.438 cv
118.794 207.201 118.254 207.509 117.589 207.126 cv
116.925 206.742 116.388 205.812 116.39 205.049 cv
116.393 204.285 116.933 203.967 117.597 204.351 cv
cp
.32549 .317647 .360784 rgb
f
gsave
120.456 196.949 mo
120.275 203.452 li
120.274 203.578 120.191 203.705 120.026 203.8 cv
119.697 203.992 119.167 203.992 118.836 203.8 cv
118.667 203.703 118.582 203.575 118.583 203.448 cv
118.426 196.943 li
118.425 197.096 118.527 197.249 118.729 197.366 cv
119.126 197.596 119.762 197.596 120.157 197.366 cv
120.355 197.251 120.456 197.1 120.456 196.949 cv
cp
clp
120.456 196.949 mo
120.275 203.452 li
120.274 203.476 li
120.455 196.976 li
120.456 196.949 li
cp
.360784 .34902 .4 rgb
f
120.455 196.976 mo
120.274 203.476 li
120.209 203.642 li
120.377 197.176 li
120.455 196.976 li
cp
.431373 .419608 .478431 rgb
f
120.377 197.176 mo
120.209 203.642 li
120.026 203.8 li
119.854 203.9 119.628 203.948 119.404 203.943 cv
119.41 197.538 li
119.68 197.543 119.952 197.486 120.157 197.366 cv
120.254 197.31 120.327 197.245 120.377 197.176 cv
cp
.505882 .490196 .560784 rgb
f
119.41 197.538 mo
119.404 203.943 li
119.308 203.942 119.212 203.93 119.121 203.909 cv
119.071 197.497 li
119.18 197.522 119.295 197.536 119.41 197.538 cv
cp
.431373 .419608 .478431 rgb
f
119.071 197.497 mo
119.121 203.909 li
119.017 203.885 118.92 203.849 118.836 203.8 cv
118.667 203.703 118.582 203.575 118.583 203.448 cv
118.426 196.943 li
118.425 197.096 118.527 197.249 118.729 197.366 cv
118.83 197.424 118.947 197.468 119.071 197.497 cv
cp
.360784 .34902 .4 rgb
f
grestore
120.16 196.534 mo
120.558 196.763 120.552 197.137 120.157 197.366 cv
119.762 197.596 119.126 197.596 118.729 197.366 cv
118.331 197.137 118.322 196.763 118.716 196.534 cv
119.111 196.305 119.763 196.305 120.16 196.534 cv
cp
.407843 .396078 .45098 rgb
f
141.754 219.673 mo
143.465 220.662 143.465 222.264 141.754 223.252 cv
140.042 224.241 137.267 224.241 135.555 223.252 cv
133.843 222.264 133.843 220.662 135.555 219.673 cv
137.267 218.685 140.042 218.685 141.754 219.673 cv
cp
.231373 .231373 .270588 rgb
f
251.687 295.566 mo
251.634 314.257 li
235.755 323.484 li
235.808 304.794 li
251.687 295.566 li
cp
.984314 .780392 .054902 rgb
f
235.808 304.794 mo
235.755 323.484 li
201.226 303.549 li
201.278 284.858 li
235.808 304.794 li
cp
1 .717647 0 rgb
f
251.687 295.566 mo
235.808 304.794 li
201.278 284.858 li
217.157 275.63 li
251.687 295.566 li
cp
1 .831373 .219608 rgb
f
252.247 291.28 mo
252.193 296.615 li
235.962 306.047 li
236.016 300.713 li
252.247 291.28 li
cp
.207843 .207843 .254902 rgb
f
236.016 300.713 mo
235.962 306.047 li
200.666 285.669 li
200.719 280.335 li
236.016 300.713 li
cp
.180392 .180392 .215686 rgb
f
252.247 291.28 mo
236.016 300.713 li
200.719 280.335 li
216.951 270.902 li
252.247 291.28 li
cp
.286275 .286275 .321569 rgb
f
249.724 291.283 mo
247.877 292.354 li
236.012 299.25 li
216.952 288.246 li
216.952 272.366 li
249.724 291.283 li
cp
.133333 .133333 .160784 rgb
f
203.244 280.333 mo
216.952 272.366 li
216.952 288.246 li
205.087 281.396 li
203.244 280.333 li
cp
.207843 .207843 .254902 rgb
f
247.877 292.354 mo
236.012 299.25 li
205.087 281.396 li
216.952 274.5 li
247.877 292.354 li
cp
.180392 .180392 .215686 rgb
f
211.162 290.712 mo
211.984 290.234 li
211.963 292.989 li
211.142 293.466 li
211.162 290.712 li
cp
.133333 .133333 .160784 rgb
f
205.835 287.627 mo
206.657 287.149 li
211.984 290.234 li
211.162 290.712 li
205.835 287.627 li
cp
.286275 .286275 .321569 rgb
f
211.162 290.712 mo
211.142 293.466 li
205.815 290.381 li
205.835 287.627 li
211.162 290.712 li
cp
.180392 .180392 .215686 rgb
f
229.902 301.611 mo
230.724 301.133 li
230.703 303.887 li
229.882 304.364 li
229.902 301.611 li
cp
.133333 .133333 .160784 rgb
f
224.575 298.525 mo
225.397 298.047 li
230.724 301.133 li
229.902 301.611 li
224.575 298.525 li
cp
.286275 .286275 .321569 rgb
f
229.902 301.611 mo
229.882 304.364 li
224.555 301.279 li
224.575 298.525 li
229.902 301.611 li
cp
.180392 .180392 .215686 rgb
f
231.706 292.626 mo
234.917 290.773 li
234.917 290.438 li
231.706 292.291 li
231.706 292.626 li
cp
.231373 .231373 .270588 rgb
f
230.182 291.746 mo
231.706 292.626 li
231.706 292.291 li
230.182 291.411 li
230.182 291.746 li
cp
.133333 .133333 .160784 rgb
f
231.706 292.291 mo
234.917 290.438 li
233.392 289.557 li
233.295 289.613 li
230.182 291.411 li
231.706 292.291 li
cp
.286275 .286275 .321569 rgb
f
219.794 285.706 mo
223.004 283.852 li
223.004 283.517 li
219.794 285.37 li
219.794 285.706 li
cp
.231373 .231373 .270588 rgb
f
218.27 284.825 mo
219.794 285.706 li
219.794 285.37 li
218.27 284.49 li
218.27 284.825 li
cp
.133333 .133333 .160784 rgb
f
219.794 285.37 mo
223.004 283.517 li
221.48 282.637 li
221.382 282.693 li
218.27 284.49 li
219.794 285.37 li
cp
.286275 .286275 .321569 rgb
f
219.902 279.487 mo
222.319 278.082 li
222.303 283.615 li
219.886 285.019 li
219.902 279.487 li
cp
1 .635294 0 rgb
f
231.849 285.336 mo
234.266 283.931 li
234.247 290.511 li
231.83 291.915 li
231.849 285.336 li
cp
.984314 .780392 .054902 rgb
f
218.993 277.914 mo
221.41 276.509 li
234.266 283.931 li
231.849 285.336 li
218.993 277.914 li
cp
1 .831373 .219608 rgb
f
231.849 285.336 mo
231.83 291.915 li
230.919 291.389 li
230.935 285.857 li
219.902 279.487 li
219.886 285.019 li
218.975 284.493 li
218.993 277.914 li
231.849 285.336 li
cp
1 .717647 0 rgb
f
134.081 302.689 mo
134.079 303.318 li
132.179 302.221 li
132.181 301.592 li
134.081 302.689 li
cp
.313726 .286275 .419608 rgb
f
134.224 302.888 mo
134.222 303.517 li
134.222 303.443 134.172 303.371 134.079 303.318 cv
134.081 302.689 li
134.174 302.742 134.224 302.814 134.224 302.888 cv
cp
f
gsave
134.224 302.888 mo
134.222 303.517 li
134.222 303.443 134.172 303.371 134.079 303.318 cv
134.081 302.689 li
134.174 302.742 134.224 302.814 134.224 302.888 cv
cp
clp
134.224 302.888 mo
134.222 303.517 li
134.222 303.443 134.172 303.371 134.079 303.318 cv
134.081 302.689 li
134.174 302.742 134.224 302.814 134.224 302.888 cv
cp
f
grestore
135.801 303.244 mo
135.8 303.873 li
135.799 304.086 135.729 304.3 135.59 304.5 cv
135.592 303.871 li
135.731 303.67 135.801 303.457 135.801 303.244 cv
cp
f
gsave
135.801 303.244 mo
135.8 303.873 li
135.799 304.086 135.729 304.3 135.59 304.5 cv
135.592 303.871 li
135.731 303.67 135.801 303.457 135.801 303.244 cv
cp
clp
135.801 303.244 mo
135.8 303.873 li
135.799 304.086 135.729 304.3 135.59 304.5 cv
135.592 303.871 li
135.731 303.67 135.801 303.457 135.801 303.244 cv
cp
f
grestore
129.958 303.857 mo
129.96 303.227 li
129.959 303.663 130.246 304.1 130.822 304.432 cv
131.679 304.927 132.934 305.051 133.986 304.804 cv
133.984 305.433 li
132.932 305.681 131.677 305.556 130.82 305.061 cv
130.244 304.729 129.957 304.292 129.958 303.857 cv
cp
f
gsave
129.958 303.857 mo
129.96 303.227 li
129.959 303.663 130.246 304.1 130.822 304.432 cv
131.679 304.927 132.934 305.051 133.986 304.804 cv
133.984 305.433 li
132.932 305.681 131.677 305.556 130.82 305.061 cv
130.244 304.729 129.957 304.292 129.958 303.857 cv
cp
clp
133.986 304.804 mo
133.984 305.433 li
133.826 305.47 133.664 305.499 133.498 305.519 cv
133.5 304.89 li
133.665 304.87 133.828 304.841 133.986 304.804 cv
cp
f
133.5 304.89 mo
133.498 305.519 li
132.564 305.635 131.549 305.482 130.82 305.061 cv
130.244 304.729 129.957 304.292 129.958 303.857 cv
129.96 303.227 li
129.959 303.663 130.246 304.1 130.822 304.432 cv
131.551 304.853 132.566 305.006 133.5 304.89 cv
cp
f
grestore
141.569 309.182 mo
141.568 309.812 li
133.984 305.433 li
133.986 304.804 li
141.569 309.182 li
cp
f
144.296 309.297 mo
144.294 309.926 li
144.294 309.789 144.204 309.651 144.022 309.546 cv
143.661 309.338 143.078 309.338 142.719 309.546 cv
142.541 309.65 142.451 309.785 142.451 309.921 cv
142.453 309.292 li
142.453 309.156 142.542 309.02 142.721 308.917 cv
143.079 308.708 143.663 308.708 144.024 308.917 cv
144.206 309.022 144.296 309.159 144.296 309.297 cv
cp
f
gsave
144.296 309.297 mo
144.294 309.926 li
144.294 309.789 144.204 309.651 144.022 309.546 cv
143.661 309.338 143.078 309.338 142.719 309.546 cv
142.541 309.65 142.451 309.785 142.451 309.921 cv
142.453 309.292 li
142.453 309.156 142.542 309.02 142.721 308.917 cv
143.079 308.708 143.663 308.708 144.024 308.917 cv
144.206 309.022 144.296 309.159 144.296 309.297 cv
cp
clp
144.296 309.297 mo
144.294 309.926 li
144.294 309.789 144.204 309.651 144.022 309.546 cv
143.792 309.413 143.471 309.365 143.176 309.402 cv
143.178 308.772 li
143.473 308.736 143.794 308.784 144.024 308.917 cv
144.206 309.022 144.296 309.159 144.296 309.297 cv
cp
f
143.178 308.772 mo
143.176 309.402 li
143.008 309.422 142.849 309.471 142.719 309.546 cv
142.549 309.682 li
142.551 309.052 li
142.721 308.917 li
142.851 308.841 143.01 308.793 143.178 308.772 cv
cp
f
142.551 309.052 mo
142.549 309.682 li
142.451 309.921 li
142.453 309.292 li
142.551 309.052 li
cp
f
grestore
145.189 309.299 mo
145.188 309.929 li
145.187 310.196 145.011 310.463 144.66 310.667 cv
143.954 311.077 142.805 311.077 142.094 310.667 cv
141.736 310.46 141.557 310.189 141.558 309.918 cv
141.56 309.289 li
141.559 309.56 141.738 309.831 142.095 310.037 cv
142.807 310.448 143.955 310.448 144.662 310.037 cv
145.013 309.834 145.188 309.567 145.189 309.299 cv
cp
f
gsave
145.189 309.299 mo
145.188 309.929 li
145.187 310.196 145.011 310.463 144.66 310.667 cv
143.954 311.077 142.805 311.077 142.094 310.667 cv
141.736 310.46 141.557 310.189 141.558 309.918 cv
141.56 309.289 li
141.559 309.56 141.738 309.831 142.095 310.037 cv
142.807 310.448 143.955 310.448 144.662 310.037 cv
145.013 309.834 145.188 309.567 145.189 309.299 cv
cp
clp
145.189 309.299 mo
145.188 309.929 li
145.187 310.09 145.122 310.252 144.993 310.4 cv
144.995 309.771 li
145.124 309.623 145.189 309.461 145.189 309.299 cv
cp
f
144.995 309.771 mo
144.993 310.4 li
144.909 310.496 144.798 310.586 144.66 310.667 cv
144.404 310.815 144.09 310.91 143.76 310.951 cv
143.761 310.322 li
144.091 310.281 144.406 310.186 144.662 310.037 cv
144.8 309.957 144.911 309.867 144.995 309.771 cv
cp
f
143.761 310.322 mo
143.76 310.951 li
143.178 311.023 142.547 310.928 142.094 310.667 cv
141.736 310.46 141.557 310.189 141.558 309.918 cv
141.56 309.289 li
141.559 309.56 141.738 309.831 142.095 310.037 cv
142.549 310.299 143.18 310.394 143.761 310.322 cv
cp
f
grestore
142.725 309.672 mo
143.086 309.88 143.669 309.88 144.028 309.672 cv
144.387 309.463 144.385 309.125 144.024 308.917 cv
143.663 308.708 143.079 308.708 142.721 308.917 cv
142.362 309.125 142.364 309.463 142.725 309.672 cv
cp
144.653 308.551 mo
145.365 308.961 145.368 309.627 144.662 310.037 cv
143.955 310.448 142.807 310.448 142.095 310.037 cv
141.69 309.803 141.515 309.487 141.569 309.182 cv
133.986 304.804 li
132.934 305.051 131.679 304.927 130.822 304.432 cv
130.072 303.999 129.812 303.39 130.04 302.836 cv
131.94 303.933 li
132.062 304.003 132.24 304.031 132.407 304.005 cv
133.562 303.826 li
133.728 303.8 133.857 303.725 133.902 303.628 cv
134.208 302.958 li
134.252 302.862 134.203 302.759 134.081 302.689 cv
132.181 301.592 li
133.137 301.457 134.189 301.606 134.939 302.039 cv
135.797 302.534 136.015 303.261 135.592 303.871 cv
143.175 308.249 li
143.701 308.217 144.248 308.317 144.653 308.551 cv
cp
.866667 .870588 .988235 rgb
f
126.079 305.192 mo
126.077 305.822 li
124.021 304.635 li
124.023 304.005 li
126.079 305.192 li
cp
.313726 .286275 .419608 rgb
f
126.233 305.408 mo
126.231 306.037 li
126.231 305.958 126.177 305.879 126.077 305.822 cv
126.079 305.192 li
126.179 305.25 126.233 305.328 126.233 305.408 cv
cp
f
gsave
126.233 305.408 mo
126.231 306.037 li
126.231 305.958 126.177 305.879 126.077 305.822 cv
126.079 305.192 li
126.179 305.25 126.233 305.328 126.233 305.408 cv
cp
clp
126.233 305.408 mo
126.231 306.037 li
126.231 305.958 126.177 305.879 126.077 305.822 cv
126.079 305.192 li
126.179 305.25 126.233 305.328 126.233 305.408 cv
cp
f
grestore
127.939 305.793 mo
127.938 306.422 li
127.937 306.653 127.862 306.883 127.711 307.1 cv
127.713 306.471 li
127.863 306.254 127.938 306.023 127.939 305.793 cv
cp
f
gsave
127.939 305.793 mo
127.938 306.422 li
127.937 306.653 127.862 306.883 127.711 307.1 cv
127.713 306.471 li
127.863 306.254 127.938 306.023 127.939 305.793 cv
cp
clp
127.939 305.793 mo
127.938 306.422 li
127.937 306.653 127.862 306.883 127.711 307.1 cv
127.713 306.471 li
127.863 306.254 127.938 306.023 127.939 305.793 cv
cp
f
grestore
121.619 306.404 mo
121.621 305.775 li
121.619 306.246 121.93 306.718 122.553 307.078 cv
123.481 307.613 124.837 307.748 125.976 307.481 cv
125.974 308.11 li
124.835 308.377 123.479 308.243 122.551 307.707 cv
121.928 307.347 121.617 306.875 121.619 306.404 cv
cp
f
gsave
121.619 306.404 mo
121.621 305.775 li
121.619 306.246 121.93 306.718 122.553 307.078 cv
123.481 307.613 124.837 307.748 125.976 307.481 cv
125.974 308.11 li
124.835 308.377 123.479 308.243 122.551 307.707 cv
121.928 307.347 121.617 306.875 121.619 306.404 cv
cp
clp
125.976 307.481 mo
125.974 308.11 li
125.803 308.15 125.627 308.181 125.449 308.203 cv
125.45 307.574 li
125.629 307.552 125.805 307.521 125.976 307.481 cv
cp
f
125.45 307.574 mo
125.449 308.203 li
124.438 308.328 123.34 308.162 122.551 307.707 cv
121.928 307.347 121.617 306.875 121.619 306.404 cv
121.621 305.775 li
121.619 306.246 121.93 306.718 122.553 307.078 cv
123.342 307.533 124.439 307.699 125.45 307.574 cv
cp
f
grestore
138.678 312.55 mo
138.677 313.18 li
138.477 313.064 138.151 313.064 137.952 313.179 cv
137.954 312.55 li
138.153 312.434 138.479 312.435 138.678 312.55 cv
cp
f
gsave
138.678 312.55 mo
138.677 313.18 li
138.477 313.064 138.151 313.064 137.952 313.179 cv
137.954 312.55 li
138.153 312.434 138.479 312.435 138.678 312.55 cv
cp
clp
138.678 312.55 mo
138.677 313.18 li
138.549 313.106 138.37 313.079 138.205 313.099 cv
138.207 312.47 li
138.372 312.45 138.551 312.477 138.678 312.55 cv
cp
f
138.207 312.47 mo
138.205 313.099 li
138.112 313.111 138.024 313.138 137.952 313.179 cv
137.954 312.55 li
138.026 312.508 138.114 312.482 138.207 312.47 cv
cp
f
grestore
134.774 312.56 mo
134.772 313.189 li
125.974 308.11 li
125.976 307.481 li
134.774 312.56 li
cp
f
137.954 312.55 mo
137.952 313.179 li
136.59 313.971 li
136.592 313.342 li
137.954 312.55 li
cp
f
136.442 314.179 mo
136.443 313.55 li
136.443 313.474 136.493 313.399 136.592 313.342 cv
136.59 313.971 li
136.491 314.028 136.442 314.104 136.442 314.179 cv
cp
f
gsave
136.442 314.179 mo
136.443 313.55 li
136.443 313.474 136.493 313.399 136.592 313.342 cv
136.59 313.971 li
136.491 314.028 136.442 314.104 136.442 314.179 cv
cp
clp
136.592 313.342 mo
136.59 313.971 li
136.496 314.045 li
136.498 313.416 li
136.592 313.342 li
cp
f
136.498 313.416 mo
136.496 314.045 li
136.442 314.179 li
136.443 313.55 li
136.498 313.416 li
cp
f
grestore
140.889 313.218 mo
140.888 313.848 li
140.887 314.027 140.842 314.205 140.752 314.377 cv
140.753 313.748 li
140.844 313.576 140.889 313.397 140.889 313.218 cv
cp
f
gsave
140.889 313.218 mo
140.888 313.848 li
140.887 314.027 140.842 314.205 140.752 314.377 cv
140.753 313.748 li
140.844 313.576 140.889 313.397 140.889 313.218 cv
cp
clp
140.889 313.218 mo
140.888 313.848 li
140.887 314.027 140.842 314.205 140.752 314.377 cv
140.753 313.748 li
140.844 313.576 140.889 313.397 140.889 313.218 cv
cp
f
grestore
140.753 313.748 mo
140.752 314.377 li
138.677 313.18 li
138.678 312.55 li
140.753 313.748 li
cp
f
134.57 313.831 mo
134.572 313.202 li
134.571 313.673 134.881 314.145 135.504 314.504 cv
136.363 315 137.588 315.151 138.669 314.959 cv
138.667 315.589 li
137.586 315.781 136.361 315.63 135.502 315.133 cv
134.879 314.774 134.569 314.302 134.57 313.831 cv
cp
f
gsave
134.57 313.831 mo
134.572 313.202 li
134.571 313.673 134.881 314.145 135.504 314.504 cv
136.363 315 137.588 315.151 138.669 314.959 cv
138.667 315.589 li
137.586 315.781 136.361 315.63 135.502 315.133 cv
134.879 314.774 134.569 314.302 134.57 313.831 cv
cp
clp
138.669 314.959 mo
138.667 315.589 li
138.401 315.629 li
138.403 314.999 li
138.669 314.959 li
cp
f
138.403 314.999 mo
138.401 315.629 li
137.39 315.754 136.291 315.589 135.502 315.133 cv
134.879 314.774 134.569 314.302 134.57 313.831 cv
134.572 313.202 li
134.571 313.673 134.881 314.145 135.504 314.504 cv
136.293 314.96 137.391 315.125 138.403 314.999 cv
cp
f
grestore
139.958 311.916 mo
140.817 312.412 141.082 313.121 140.753 313.748 cv
138.678 312.55 li
138.479 312.435 138.153 312.434 137.954 312.55 cv
136.592 313.342 li
136.393 313.457 136.394 313.646 136.594 313.761 cv
138.669 314.959 li
137.588 315.151 136.363 315 135.504 314.504 cv
134.593 313.979 134.35 313.213 134.774 312.56 cv
125.976 307.481 li
124.837 307.748 123.481 307.613 122.553 307.078 cv
121.742 306.61 121.46 305.951 121.707 305.351 cv
123.763 306.538 li
123.895 306.614 124.087 306.644 124.268 306.616 cv
125.517 306.422 li
125.696 306.394 125.837 306.313 125.884 306.208 cv
126.216 305.484 li
126.263 305.38 126.211 305.269 126.079 305.192 cv
124.023 304.005 li
125.057 303.86 126.196 304.022 127.006 304.49 cv
127.935 305.025 128.17 305.811 127.713 306.471 cv
136.473 311.529 li
137.624 311.242 139.013 311.371 139.958 311.916 cv
cp
.866667 .870588 .988235 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2008.i039.012.P.m004.c33.renovation repair works isometric set-05.eps)
%%CreationDate: 2/19/2021 3:10 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2OedcgXWT'-"VB<jf'V^8`s!Ku@E&eYf_OH=#d@dF:=]Z&(<jEu3%qlM>>mC(i*-G\7\IHF5CWE-'"V:m5\mbc>LH]:Y*
%EKY8>Z^_W9AS%0DBk;r&IouaLci*_oWk1R[_H+Wf\Q9:[h48_q*-=5qB!'bS/8#;S99%0]dKr#bANg=+>4_2V^/c_U_)o2%H+6_R
%"WP^0^!t:d=c7giOC!CfJ[_9Sr(V/)E3g%I]qF,6JO&,bh;.8ikU-D"jgJR6KceOD?-C&+0NR)Sbj@T6Ginf8RqM:fKKG7`04ZX1
%BC>A/E)Q(FgSJeqg%[n[Egr(-b?iOFW<_qcjU?ckk29[F(`\lg[B:EYVV_`0G3:Z]qs>.c3qO2HKjJBfUZQL=$N]C^-&2Hg2]M^L
%^Ni:ZD"X?iSK`N8Ws4TLYpDNpq?8eJ!JJ\E+Go1HAuf6QT64UU(L-52oiA3E%29%,>\7PZM:6qYraqV:`2]])H!/E<i$0g,CV-a9
%Yq<etdKQ!@LrHoRWR!uK?e+*'jiiXU<!h9I=*!]r?M/f`'0%oF=+b^D[@mK$;=26Q*J4*%em:9c5n.MUIsn(m,0#J$K`9IQp.Oe:
%TF9Q3XS$P\Q8>+DT"XC=[n8jejCtJUZJ>j+qp"jl:r,:;HA6(CT4-/h1X*.YR9,ebN(9c"oSFUHl_\/.B6"6%I(NZIWA^'/Um"r%
%Ce(i3o6.OikC/b14S8rQOS'gtqW;-J;S]p!%2rjBN#rgA8*%b6^>?b'Y;[qbAfW7lK7D-u5Vta9C<[Fj[/Uqg#$pk))A`Gp^1kFl
%eHU3phuC>dcb./d=q;Z<D`<$Fc,Obp^]0_F<LQEDAujVk1?r;&T$D!2#Zb\as),9ki3/W8T[_R*fi#48ImKuZB0j"S3o$il?DZ]V
%6+P`d!s;RZgIL/[0A$YIUs+;"<!J<?mpV\2*Q"nb%K>iLrRLg)anq`Z@.=+)'Qh%Y=&<\@+s!_-8UB0kPo?KB82N+qJ&.<]b\Fmc
%C`%7Y,jH%F]*2`=?3Ve=_?Q,mM*=r)Sq;(k)O4(M]D?;mjG8eI-0_[2Wn"*sm8E8W>0c3`^!:>(^Y,]B]uN5G^D))cO7:DIBQSlM
%A%SH()?$RQ0`445E9`uCr`](tgm?sX/:GJKB"_(GTc_2-kI0(@]*);OX*U"d)>AU2O.*IkV]POQL$X>-X-RP;hTnqU80mSLAK"en
%N<UJYFOK)?;<asmK%"mJD1J+;g$;YM6!lO>obMkURD%'I.j,1eQ@&Q_jWW9aW81W\]$R0+90M'Wru=^'(EJa\iU=uGr9_DfXZ,0d
%d-kGON6XhjrUYV2/"*qtlEpgY>QOu6X%0j@!/bS))Woc@dVt]HBsguU#7YFa1QOI\6&-!@O7#e3)]m:-pZF>npRo^La^C=I9!t7.
%o?WdNNDa&i^e_#Y9IgH7';4i9E[WUl#nj.%p#NKL!#*h#]$^>c>3VV*^dbf&'J`DRkTWml`L%[0\5V=J!5F*9PJT)aH'kY?:.pB/
%@e?[c"B]*-`FL3b2P&Lf[>uGNCm9R1BqaCpO;_Qj'1&SEh!8"WS[]N-%^j1[4UL9][%7tP3*R1DedaaS=q]Y*)G\MFAM&0^3_-#A
%YgEr0oRKSufX@LIP<t::N*2oWh_'+GIjJR>B]FcgB&(2TGltf`is5Gt.?2EYcR8`\AnJ7"CR9\:.OIkt!ZFX(5\&NU6FAP.,7!bs
%P=&k3V'BY1>=#k(6"C%%qFr=g0,0%]-n7k4/iPToo"6Rr^uJmCS68EN\Z%h;%HXGtSMZS#`_arU6b26#$2h]pRqB'l#'4K4pTN>X
%Ck?cON5flEZqD=\V6O8DbGDIK)TuEP;jR21LusjD1%"M$ICnLL7-Mic49q!D556Y,m@BOmc+h`(X$f]cVctSSIoU2AC8.pTg3cdS
%X]ubOCN"bkF&_IbZW("bE[L#S4>6@gSSG-d+-56"qp!6[Aa6h,H$nBR]'%;S/4S%o'O)l?-W-<"Lq/\eV5sMMEEV0G*h,_MYFu&Q
%]D9Tk.cg'InSua&ebiQCOrMp<VVACM]aDZZh:oV_r&'E//&@g;:9T(N.L1=^;DLudBKi\G_Ff=qb\"%ZC9RZdC,UZ5P3Em5ARYol
%a03j+FLn;AiR`Qj7K\YsBitaE@+mCObY!Q.PijN^GVV,TQN3$F:#*eABiZ2/X^l^B`L@gdSefj.m5N7be!&FW:;(F^a\9Kg]d>Gh
%X>XkiNQ\GE9Uc6rD2X"4ctH@]"%qrqpTtu`P>'1ol%3*H9?2[';';2J*]Of>nA%MW_BFJgGW%0W21U<Bh=H^rnBWF0pIXLU*1d6l
%YhNY-B/'\+9ZI#dL38XmqDr;^"A$Y&oQHB:T%c7I2`ch<Qd<&ccgK,.l7C>;Oss1sh6p$AlkXI/q/$UY'Um9M^)[@V9<]C]g\3GY
%Y5LPL.[J,eA[-Z8M4'd)4pdEY6K0>eoWnj!f=+D<C+kEA1^ti"oetR,;lhO;^k%li0I0Y);l[KJdil%CB4Fj$Pq&u,i2^Qn?:P=M
%`%rY%9=J=CCm#[Hmc`f1"FPrJ_57ItBBrrQ,-dP^D4JPcc\aWhP.3&!HF?&SDWRphm@RSERh`gsirod=)eCo0H]O3,D-!&nSX]hN
%WK2`Hi6Y&A7V&f[6ZNJK"q.?*7O+l!"Z<k6,KW"*a=EIkD`>MtmH*jWI:^:HVHE5mC8Gs$f>"sN[:[kJe4\.oJu-AQLia9/\Z*'1
%$*kGT@sG/ef%sp]Rd^NcbfER<nFL+"l"?1+^bhRcN`4P]SYma1>JDIEVDsKf58":Re>p.`nau1H\cg+0p?a<L$+K.==)53S4-43@
%S'V<0fki)+M40XGTiQ"5V$+E6+W`,njc9_pkr5.I;@.IAEP#@L_I1l0;Kt$eN<HOb.[PMThDoolU'O1,:X!)_kMAVu^VNJcl_N90
%9Ec\,V37XSPA2s(1thuLW<mgO;Q8[+O\%MaCcX#H9!uE,58-^%3!S2:4/!%U>##F$"KlE[[`leL&.TLPfjO]67M_gi[@Tpc/`+t_
%DF7j@>7^n$Dq.SsmhY7X8MVNsZ65P&7%'qMm&f-$P"9Dd?5qe)SLCuBb.o8+k%8Ka8eUie("4u!HVo52FZ'>K;9H@^01ljfVLD)j
%JY/S&77m6JUjGsfgV#"leD/R.ceGfC,mc>*Dg3neJ<K=hR:?,<>PFj;'!/'6Fgl'<8ePZH-'#^b<LR(G;j1lI0-OVbSBKS<SsO,G
%=#q#$=$L5=-K7Kb1!($_WqqF[c,1`*LH3$0>h:O\YM3)crDqMJ8WmJqh,S&b]lk:,k+m;TeS?t6f+RReWn1.^[X#C>#"\$^h*/4^
%i5FJ-Xd49KWE-Wa<_K!k<3+8o<_IkK<3%=nC=*ci_eWT.T1.k-J-8qZ=.ZAp^f67F01Kh/7L;VIMGYim"$H20>f*gGr?nQ2e4Mq9
%YPE:uABsjP)4=lbS0IrMU-3OZ[POr`g-ND4p?;OX'lW?DYk6&VaNRWBPA6j***4*>D\F/DX4@VMh.!,<'Tohf6B,R/$F_ca_Ojj5
%r`t*4nD=t*OL^d]XD,qG[,t"$-RQYU/c%4GXDVIoQ]&M8hlu+`[(/[+6>/?p[.nLK:@]g\7H621M*Dk=^Z.6OBqC?!(QqFpKMDF0
%pou*:eV15JZefG?+NiI,NRLg-e7XtE"9jG69PT.%c-;2\K>\88eE_]a]@oEM#MgZ*D.[q-D5rti!11$3gRY'`@&&Q)58)m.DN/f>
%#CF&F+c5i`9i1VKbelD&#B4([a%4M86Gt0m?$apP4mA<9s8Hg"^Xl_b04"UK(1+^TlbBq"ieq$Rr_!l\/&9qD8LU.oRW#e"S$)Ps
%WUP#S2dQ#Lf6jc3MUFB>=\)quCVCV'=6Z/l]&m4r*Zt->g`eL0Eg!(.>Gp(:#%)$sBc6>ik#4KC;kIOp):WEG^Fr'P<]rJ16A)*i
%<d.8geF3hZM]!-q$u.[.bm(\IN?iO%o#;ARVfY1%q&3q;cn8%^3Ckr:BngH@$?bI+*<_?:E(kiu5dl!e>ktGSX9IFFG#2=U[S)Ub
%X#k%\/5;\kJ>#O&aA#TGs/t0Mi%V&(Z\^b:bY,0p;u0k/hWp36&9;/^9Zp#tSWa&ETE]m=Qjo"]ST($p=J]D8$O(=?HW,eOqUs:0
%5*Kf492\6M<_ruJWI88\cmRnUgsWhI3<-HJeWOIs1rHKrdt3r1;6jd*Q&-ZO^p]WX?6YjqqF[3$8J<akioSUe@@BV2???s;nh4_:
%,u)%JM3g'hOsXM``6/iT9=8j#pfUcd:(p04!pPjMg!]uJ9P9G>Q$Skp7+,p6@=IOB:#'ujDj$Q'[Yml8[Ta-&mr"VD4`G0e:"63!
%SPjTHIW6.Pr^dG!UdZW-",CSD16JA/`pZr=@`nAneD%r8HMjaZS@!-,.kmg>0s/7`C\.&-)95lbDngss9<0_BeX%W%VS>juV7k>U
%V>9k.?bJ7RROLPqWUs0h_ulHt4-`$%'9XDLT+::(*ZoTX0$ZdFW$E(FR0gnH>io0\E18C9RV!PZg$/SXrgC:?D\K>QN\S>Q8D3A=
%#,Z6LDK&`tFs\Mpct4Ff>@R1&`>k>b(AosKF-[5k,Y!'22OOk%!>;:rZ9;H$_hk's-UHqaC*h9a5i$<e%de2#a117Ed^/.C3GBOE
%"sV;KO"ln0E14h7r]GpZ$h>-+E(KR;;f6<u4N=b.nMH;hjtUHnO7E*8B\cR\D0r`T5!*YKb2#t_9s^;L]RkIu6@+=@:Zt@L?FSW?
%O3<:e7%W%K^KO90WaMLmUl[*6o2_^0+H[d$1,Ar]Ptb)_kGZl:2VQ!.?I1)JM$A^g:C=QVom.OiqDP:6^CnXb[.,tohecHl\#Rf:
%Ptc4Q8[k,+E&B"u79V<X[`TmBdeh)PAj)"K:p\8(9Xh;3;Hc"mr:He-K<?;m,X1('=>oB?&jQ9,p//!t[%>O<?m77Gg&nmmkfLBF
%$ln>uA?,?DLV2&'B`dblrlf<T8qOpeDt^JSf4M3SkbO]]_PG(K/1'p/Oi)2%a+'l.;YMBE/6u"QS=\gFS?6"\MmmSB1-WN,SZCi2
%-g@8KGV#1TMUH/jNTSZ&/rf#ABJ,;,dV*M8^F>-('"F+64do$QLSaOr7,tf\,o1)LS4eB8)U;'^&>e>j)U>2<gf0#L9C*DsFNKW3
%p5i&+Y)k7J3b_,D>p8#iZWT;&Q]g!^gE+ZeE&qXA*5h0S60@;:1/'D`f.DA/jfkS(-)O%#DKT6AZp*VC?&8kCg$MXCf2Ef%1<J_u
%3-+:bhW:M9WI2.;;4qO%<3CCo/gj7-G.KnR8[?jWh5'fuiT7s5UX'S41FlqAJW)OO;Nu8IDPQn)c*Nor1J]g%eN-[nZ#I<sgMGc6
%G>!OW`-9;JN3";W:=8=6O%\SBY?X]^U(&rOqO+pRr(dHZ^J>L`e?A+@kEjJ8-)*@.^G%,7'%G4SP?DQW3o/6:9/d*-e)<6_(d"Pq
%P)@jVl\%01g8k=[hDH*sR8@2\"T#Is^M:HKB^I6b3@T?G"Jpg()Z22G3^fe2K\`P8Pn_&8Z8KnGRiD]JVCeou;f?Q*EPc:)5#+8P
%$%$d'h@E5OHO\#us3k^@Jjc3WkUTTu$CS_:_UBHPAX8m]e0dk:U>O9Eg=%f>dn\;e]SWW^NRE6t;kCh?ET]2RG$dseDU6&+jLNe)
%f)qjm[<l'f&s\lW.=G$nG'?R/YqGW!7^<=?YHr5fIA1soUM7_Vh#<ZA*:2q0+c5-L9i16k"J9>eg'loT;WIO*l)CYkMjO)2;qm\n
%`d_!\V7(A)k$ct\A!2-4h/)+&ArtKb#(J;(B6NFt7Ro1s*0JhARB7Ak\*If!$Z!T&U.]m'bKSi8SSs]K,r8kpW*Y)D&sR*t#p"I4
%`A$sgmQ%r93G4E%/1NZGZ1L8#^I$#\(t6eVR_gnOG[slk[U5XSCX]C4DKh5(gYs(+r/%pTb0\AaaLJe9`^J2,^<NQ0QP+Q';dV(c
%l'eYa9N(_"\B)T74LnZFoJ<^rGj@9?iDKa&df,5+DnZqo-'O1;P$IT@POA))\8LSs>nih4#<lcpMIt_=^.j=sH0rLhd,(_0D^aX%
%Mi5I.dSZ1\SVc\YcQl&6'>j4%B"%tJ:KX*&oGZiIR8bE?M93&@`ld([2LD%$fqd;[h0rq$TBPDK$?>RVo7"=$kStt\8RVsOrc2>i
%e2qB24r]b64sn*cC76L88Z/PK\CmQ-Dn0%'NGs?3?dgTm2m^KoL.6.(99AT)2OS]thPc*o+V@BlkjV<QYlh[9\X+TOcNbiJ7eFfP
%s7<*VcTLl:Vq-Jb\*7?;(f7B`4:3k>G->tUH!P0L:4dY$]3TtB?M#qHSear+>4k9d5i$OsfrR>k5C;M@R)b9N1Kcj`5[n[l2h9VL
%nKA+s7Q@SqVJnW7/;sMHJ%43mErEoMe[&Mm]8$R+4!9Qe)U6#9oJ`#V\QjcM^2JNfPdH#pqC;iD5:.W%CK10)A^(rb9@ZL$2;->]
%LZ<lcgFU@Z[b!*rcS#6$P-<t?SSEH.;si^ME;iM#r_hKglc+iMRM]_dm-Y)>-?*OMSuRO61m./n++F4`5??nmr;$o-^L:/!Y;;fc
%=II<]iScCQK`>)WIh]R)#kM;sY>?k1j!^:_a#g,@2\rTE/SJ*9TZ-^d:_/1,n0BDML>MB.r5d2SUX3gVHI_FC'F%pY-C2HX^(TP3
%K0J8&JR2L<Gs2K(AK@CgdYApI`>gMhLCcAMnWE3BdduB%pDiV\,;+AhSBQa$P5GqT`.iOc*"gEti0"?4PF6dL$.f+`)V^P"Xlle?
%K+ko(r_HAYiF(/&F&ue/^<SE6nl0>$8ip&,QVuO=RJTt:hB&1>X_^G+Cf=o7.bi-na<%[aEe?NuF+n(Y/@1`40QN1:>Mp%<''Mob
%5&mU"YFqc[<)'9*3`XXq=4=;T7;YsI"8"Ds.AY"\9+]GBI+7(Ji;X"13#:`H<,&7&q^P3BVFipMg8WN7][Cscca-kM3X]gsEj@"c
%>tdTna[qD3+!#.p!H,?][Xp="po2P6FnSgW[Zg"C<+i*iqc=bSbN1oJg>%hS6q\tFJq.#?oRg!r,l.Uc[[4-6VFp_X9&!(*G,hoJ
%V>Vo:RknE5d[%`t?-SeX"JrNB"Xd(b;^#W.LU;I[9kgLtqasK899j\#Zr<h"$eZ,!G`;@YEL2e(%Bd0-]CghfOqK/@/U?JKRN>%c
%p=5G:T.95-Br=T#(HcOe\P"Ag(DO..2e%+de"4"M[SJ^<MLkCjl=m.gql39CYu7Eh.d^2Ls,,7u8233/AN;5%ic*kUogm98UH6$e
%6QM(VF`sdkImI^s#'d+Kl[F]Um(I/I<U8se`LWI()#^5>D-)FH&.H.g[?@R4_NPZ9]#'eUQj[#]98"u6(#faC2)67oQXX-1R$MWu
%)8M/*BWa9DOn4tW+8">;eUhZt:rr#Dl")0d#T;OiKT\c!Z*&""a4;K+qn*=*GIhW@h=kKPkjm\^8C,*Ws8C8=3KA9(#H(Z55X2t$
%%84X/?jjm?d#7K9g2c=I8**r,:SD:Q%WeEB(]Z)<_T'fcQLADIG+U`VoDFHi1\iE8e[V0d7tr'igY`H8@%uW;O7;V=-d8l<f/rg-
%,_f6?\RW3T0Gagr50>=SaY04mAsRbQpTo=uXC53107"[e#WhA]HI0WC\Q9:[h.!>kA@[3bfDn_RnZN&F%0-qgI1Z!pHm&N(*0q64
%\%9,IYDbR5J,f#nM@K:jk8lH@LOYTCSWsT+2*bZ!E+/R;E&=-%^Wns@^lQ7?W!0Q/29TVu,nZP=e&A:On>P'>^jn)PZNAh^cg1hk
%2hXm,7&/#1P:<Y0P]MalgcnJ%MCR3S8gG9GApWHqE-\:ar)[pHJ8M3:i=XCVYL@@>Va14:.#T^%9'Ep^%0\accDghuh!A<O$if**
%cg;A,cLKdj^u$r@aZHnFq=^b,f?IJ7[+Pm\[I[unfo/^`c<fME/Kq!sfnG5fGbk]Uj6)XL`]]r*L$`/.@AcEaj><"A%%BuqL;NJ/
%4PY'6L4<8Th/Toj%O.iU:'H*jj9EZaFk#c0YH\f^GIQ>WPDdWAd9oFNRMrYeoVJS_QcJ1WFSHSYm\XG5oq5NhJAZL=KCQ--R(F*(
%2+b`-Ok'Z@N6(-s5u9jRHlqT89T&!krCj9A$JLnC[GItWDt)tS':Y6?h4nS]?-/?$.RDlUEgqDc)eF9VW;f.)C"L=m_Q?]TYD(5k
%[&Xr:pA\Sk``U5'Q)Sqq0Xq+o$n1,cXW8jE*'XQ1h$;o'>WCSRisU3o+Eq87m4`$h@CQ34@jl?JBU6u5]e58Pfk["dEeGgWDG@^E
%:hoo.lKn2#b6GQ5Ba:3%rE#*6&,tg*ego9gl)7ddG!l-fiZ8O2k,^+TD8@4HEk%(ZjR/cDD/>,WJm3g9[Y^.d=p`73de0hAZrMe)
%^ujY$Rl<A%m=tfDi/R%Em(RI`j\DuY4P+7']>V[ZpNo#'(A=6"W$k4.n9M-]<3#<iX^8-YQ\*%tGL8B?h]<qtYUhpJPu]cC>M0nt
%PAGnB32Y_:WA66johssh(fmY:42^[BBf3L7j>Sm*?FQ?U/TnWj]0G\(T3hhgC9O5^%7#ku3n5<MR$]$jd6]D7CLoChg:BQPoE'#(
%2\Sac0c:T-=nm-d3=S2EUlToD?u$4aZJFiTJ:fM"aU/o3FF7;h`_!@U&nH0SX\]?o)0XB,mKL!7V(VDIeL[&%Lf&pG`7s4S2%1[B
%D\`T37\B-Z#`>77OYSG.*)a(RjK85Zcu*:Sgru\N<s\tI[#%%@Ig+pd-jS\U'&>0fmT7Q=C(%BTjpq@kD/t6&0TJ>I7@:-27uu:%
%Bf4XE#s[$m8aj;!IZD\W5MQ@D;g6AB.rfmiM%$<3kZ0LT\g9.g3Tat"2O^m5bAD.hC,If1pH]b[&"[*X.4E#9[1Qq1Zt5md,\tJ6
%RZ$\dDgNd0D4.NaYFlXek.$G`TGNTRn3R?9Jap,Lg(!TmN7T6;K_9i+IG9*D@l2++D$T`,Sik&lJr(]?B(gO&jJ#D(QJF=NL64g*
%HlQFi*LcM\F^-WDNi(ACE*?#kU<R-e^Vme@T>JWsL\C94k#']s26c^#&PVCe_ef^2;QVjqBuA1VB@YQF#f,*smFj81m7u$(b/*7"
%"a,c!`J@/F1.&'2HjNITp78-s-A.5W]e>jFRuQH?-DE4I,4r\9G2+JXPCU6#lKO[EG.P(t7J0*E%;?O60/hGL,4=SRD-N8dk_*+a
%q']F3$[Yk[hgWbYq#n7TmEYM[2U^J?U?]oQG@bHHLKd9D<R58[ch"hiD$NCOAnTfL?E85,W,)ob61WU_Ah-h6/8Nr%[r+]jic-n-
%q>'DXaD+[2E#\#U9'5>MVUu+'eK2VOpjQbRXgi;6LWMNieGoWrl)^k&A%ehQiH?ID5g:\s\Nj(mJkl!7&WMhGGrjkSLXtY^8M-FP
%eQS'1@B"<ImFFq4$^K9#I#Oe)CM2r8AimFm\_2LIn"P;W*ZirjoOa+smtN0M)r&#2aYqmRY^WDc5B"'n0mGIOc1_26Nd>Lt\r\,U
%@3>I;8bRNQe;_[](UM+>UO3$XhC`X>f*.Obb,nkCk;eDm2(COGkAi@8l9YIe7`XPoKINse=p`9D)kMgMl_Juq%3"FfSu\Nh=XW"o
%23*BiR8W)Xd5\$Un9h_!m0cdWb?.c"D*dok@lL3CieMi5rn'Z!b3`"UO)9O+6PU%/7IAfk%9F?p(VT:4;S.#,"SU4C72WEj$!MPJ
%G[8fYC2Dn3(cJRag1QtMOX+Vr+%_((d?2Ahd;bqNXjeuMJ#ZAHIGAY/X8K2-VfritUkkMB%\VR;3+AGA:A1WDY2=MghT7[-P7iT^
%kI8=D%g.ImGR,7?nS)7T>E*'@V%CIf4U2EXV^6;kKCc$qXb&/0=Uc3TT,t99%5i4eFT4S-lsN6::V@/oCU]'t$^AMaCO.baFA,&=
%+<r%=gt_TBWZ^tdVI8o=s!gLe'MK#cq7)a8<r"k;6S1@^9g?%aoZhH#TLDAkUOQc5)@Ga5q50iL/oXo8M!QB@0@]?uf-m93=fRUE
%o0_r'*uVI<@63r<AetXmja,G@Rd9<(cY#/f$P)bKB5'%=1A"bN*H_tSV?%TDJC`$JN#@.;5F(P!c\nJA/XtSFBFK<O)&S/Q`]:BJ
%M]EPRF3QE4hWk<`AsoqMB&XF?KRkie`o/rL:,ETEVM&JEl*s[j-`HD8mGjj%m"#UYGgnaI*DfEa.3(S$B_Ko)R;.@0Fo"S8,dN'u
%[nL]2h#-MH.LqZZR"NQkWf:[uM0^^\hQW[EL:[P5_i_C^3^L25OEn1P2;@RMa_7Q8g8H"\j7b%BR3,1D%^b%5cC6.PCp3<o?%Q84
%qBBsZ4ql@;23'%d"@(`/]Yq$hEZVoqZ/:Pb^d.U"dIhds<5G4Y;ef9R3rdt<^3XQ&43k7a>I9&?o%)a.e;u<]1%e_%Y?cIf+@7`!
%SLa'cN:&PqXb0PKaKM(_!I#N8F*'GumDFoE_$P9I^>0huM$(C+B!@';BRs3`%<jV0J[!m^M8_G+?#?+^3aM5ZHB%?SinS@?AagDL
%(lc(-qC?gHX*(Hc'=jeVkf#!rc!%5>nIP-^Feq0^=*KN@LMFX3(NLGM*G&+<c(/IKH>_Mt=QB9jWAHA">VCe^'hU'cC0D(c3o1B)
%?+k,6RcW"AZOZ-amtTQW3PrqD%e&KpLW7bo<c/9*Q"$+75Qa+!09-OU5Nkg8*9N9M@7V#np;+5%XV"mVCGZ.YYO<mQ*oR=d*'?%]
%_FWok[8De?0_Rr^>sHZ'[4tWV\2lPaeHcE?!DuI4D,u1NX2ic;5E#2gbdb,2&\8!:#@dLQZ[K9/6(C&t;L0)&Gb]WpS&Q"TKNme2
%1,<I-&r:;*ghn0u\m)#'62OoBE@d7G_gpls7#=It@%(V87oWCg6.W.s)eDi<_igO?(ZX+C01VdbeA"1c>*']C1=E\.SU#Lq?*1jG
%Qi8,=5]A/t8b>b4k^Z8Y?,Ea4hADpbq;9Ri.t>8n5P"2_1bHKd!VQcl/gf]$Lu`N#TjleILLad[<`2DE,X^R3@K!B;:8p:YfB=F0
%M+*/iCM<Hg8'%aU7X#Xr-kQLL;p"O,M1!n]BQEg%ZL26"f*6"TZ3)]c!KbI#DQnWEWuj2keQO>OOW+qC#hd4nnWIh73T!@;0jdg/
%3S$3JN;R_-BknjO*V[g"2l`B0O$K@ji95SHq"q`%LhY`'4-lOXcjhJh@>qgJ$3i'ab`_4^"rY+%SH2^;rTn(o4q/Eu:'h"3^`e=O
%lF]_EBjVcq7&JJML[(%3pdhoc0Ui(a`fB$(Nd>W:j.FS&V?NQ&#5B<;*\RsiFaAZ$-E7OJ?7+YO04s.[@0[7W51=@X8*(jlV7];I
%;_+jAIc=tZ;QBud;t4&s01ps"D`3K[m+Uo%I9D%1Lu!\\2imh<Wcg/2`YfNraH$!7NT)S"X0%%kC#fO:/+I^/Z&CN(]e4uF&1Jpn
%q-q&Z0U`gI1KSF%!eLg8/"6gBF)VEi5`-]A?_f`D_S\I'c>0J::lXlG\q"8ekH<6eFr("ac2L$M"MFe8JOL^j3(Iuu).opS&8!AA
%aj&t?d9KLaGathbp&aTmJ#G>62,SC3YHYS%aWa-q'rkqehgW$4i:FhN_39X)V%8J;`ImQSr*&uCrH.k2ETcH'S]/-pKk`'k\`^VP
%Z0pCQ?@2GEl"g1Lo%'ED?a$kaATqXT^\7(OgV.H+S`9D'aeEorD<5R,dG!kpX0^B&`?3!1elK6IZq[Tfh>GBQ[p*XKG-G&H5'^<a
%B!W"D7_Z91q$8'aM];DWh+uA/`U@1)p8=b+>eR\u!T^kj$W!>*]oAb7mi_YDp@&&G;`qKp*l[hrch3@TpMW:rRG0B*hiIeP[,(;>
%[FMUC05Jb%Cji"eGe^^BpUkMTT-8MtHip"FGl6[=c.CN]+-quZVqo4hqhYbYjP,;rR;Mn)>CH575]m3^mM*C,Hu6a(#="*8Q-DDd
%-1C`EgtpK8L)S!c;PaVjn\<C%Ph4+Lm9JW"5$V78h%pS;no#;Y/Z][.^=t%=]gklU^V"p);D+<]n5ja@rHRX-I@=<"95_@fn(VmU
%lcVo7G5p75V=qcu^"h2qK-,obr7]<:;ZWM1<o/=/b;IEQlO-KpY<7!oIm0jCmc2TtaL03\CuK2uKjC"&00AWREpgi\4V1Y*\QX5_
%Jk9RXT?Jl=#5O_";cbr+gq(7$fNc+:YeK<o/36\ar9W3el5#gq(KTEp4tlN&]3hMoViCS(dSo>V?(@5,c@PSqJY[U\5FZk_1kWNG
%Cg$,Jh:KWdV:>eiG8<BMnM:Y=pe&4r'DRN/oZ*h'Ip%$-Z)W;U*j!+Sm0ej<hc+Ol,MrV6ra7<?ICd/6MpG.ik`-.EXKGO:^\LL.
%)3,R1gWiI`)/,:b)%PUuIgBlYaY("/CkBbjq;NQ[)_Ao`g\KoX0B`%eh\V0jO'hif09mU8b<&5_hYK>.5J50V(\0Z,j1X`=[3&bA
%:Z+$Sqr@[L,3UDPnnJ&a/\KEa+*-*T`U=%eL$EmFn]GkMrlIXgp^mTH55jWT]9R".KAPIGqQ&EFetZ:c`VIY,73+a2,m)-hh,a7:
%_R'!5*t"jBN`TCgg$ep&gOIoDN?U;Lg^#4MA:/(J0jX0t"DnsZPfW^!b5E"QD=q&ZgA#_`&0J!&>MU\/O$$TNa>a($_t,`Vh!!gf
%a\_?qm'P4d3[$CY;SCk3Si_>ALi6<1=tAJgk)Ne[F4TXU-U*%Kl`(lF+@VgWXrhK(4_W(V:7^4IonBO77\=$R%R)dBg$GhBOAXUp
%]'9e+\\%HePLK2b]2F*eRr^gaKAh+.Gu8oQd.nd0f9[86r4$J2c[o4%pe5T*F_(T<bu;BEhthR52dU5;C%qP#HORctc7T%NIQbh;
%h49Q$S_D4U;1@L4:S3-S@OllV!3bt``d1LnH"Ujg4mAOhHguQI^05p^Xn=+B]j%K!CQ8)5h#?PnHdKg6Ks63\qI9%*hfuBdIa7=%
%T0@q[^-'Iu$X9N4Fj:ea+22]%]ZjBO'%c#jG[WEiI,WVBIBg&#o&Ko<qesFuqt)$*mXD]&f^;%CGQ2a/qd*K1-109m$i$-=KB>gB
%21IO9Wc"n%B6+Ybs(V4).7tA[/J6OXXJ=YKglifbIEOG='H)5"l^kllK>!BOhRA3(c-A'-n+'bPB>*$^gtoN,"oZrsI9Tp(;92(f
%Dsot6Cd#kG:VF[$?>n`h5GcAudf<9QCR:A0W%!W3lJmr+caF2jf6pZ1CVB(`?F*t_e^rc@9&=m5.QR1fji8`4r;,ms@&:7ZN1K%o
%%K&o,Bh?)8C@7m*hY[kuk5?=nP()576$8uLCMc>KB=m[!HVlZJNEc68i;g,_Zm5E@]f=e;AGG+&0@)+:4WH=+*$+\RK:pO=9W:Z)
%epMpB_/sUK(OZKp+/Vpqki&^_X_R,dIgV[kcQ]R-lu'!nX*;nJO3b?b2<k!Z?e5]0=5QK'TLeqDi>^7hf3FrXpmJtOMP&eL:<(XS
%oKU7^4?)naU$D?DT,LT::dh_Ws&Cc_Yn);0F:dK:8MVlNKDK/je5$>KMS)5r1PS'<iJgWW[\A$>q.5dsoRK+=7k]QK&]7EjJi,HH
%V(48k"D^`L51,)sLR7W<_`e9['9Q=LnE6\O?cE#o=$JfIEmpYd_5UGq__+r9+@_mBBZ\3E:_'5$9&KKJk6;l1QJ<93%8m(V68$,h
%iU$;G;Y#'1pa'OJC!d2:U6/.0fB8]Ao8?F36kld7ruCY;+6E4R^M7Sd4Uh$-%QNTJqr-]V?p.;o2SQm(\@chE;&7EF'c\fP`WK>S
%#Q@EeD!g0K]9>SSlf$QDq<Z-(A_SCmL@">e%sOb^aMIt33uG(/7Q`NWilTXH1Z];<CsN(62gPSrR!!W?rPLY1E8'(F<.+B(7m;f.
%r\2F\2N$7)HXGMtkhOb?l>5rG$PZbq^ThO/X%V>.R_qoCs"XNk!nI%Ip%%,Aj1M_>QQi+Lb9*8hK1G5\qCWRE:bR0ET/PCbqpX;[
%7!DMS!od8iJGn1ko2rP?,9;09iO,NEj4Cnmk&=_l5_1RA5@#R[8J&Fo"*MT@,sgU$gqf(LQOl.l=:[g@?dJQ\N*"32?g)c[GQ1@K
%9cm^(ai!M0Wo)@/$Toio2A+Q!5Du`9c9qBDr)*I\g?2!%\+dXZa]5cU5%eaAWM6'nEW8u#<OTF5h(A:KLOf[C:JX9Zn\T]]gY0tj
%^O$-#%q;P`Zp0^n0o$t;;oa.tb/*[sbrPSnYlT6L+!-@N2:sNF5J&"fS@r4IoLBdJ/U!bqr]'KIKbaL0@)#oU@[P]$>1l$amFBc'
%i:W9UXM"FHS$0N;j6LZ-s%rdg3jUJ1%e*8,G71<uhH>RF+!)=9plYf6Z`"&uB<N*o:t[k;6U=kp\D_6&N'Fl%Ih;1`[9T]_/=``,
%"-KsShcO1a1E6&IDLDERkjHH:UPIjNn,%6'n^ld6a.GN(]_+&[G%YZIc[W%2d6m;L]UsQJB(%m;jQ=:pGG3.6HsjKt]qZT`X-KeM
%mq`6rThcWt*;]MSIi:KaEotAF]7'P$?@I=lN4uN*4^7`:!FW`)p'[@PcF7$R(O<WZ\(K]PcCKN3q#!#4YIn$G+7.`HZIPJ&f%(Yh
%g4-b_Z12LVd0A-D!!1GUV#f^nG@TZPrlutP.b7X]^,FOPhC^om5$cgAJi328'>$bVogl+C`DZ5;qp@@IBqp&sBDnfE)G9QcDooqb
%41PT,&h.I7OX,j6T(77`Nf4+[(o#"3EM;*c3g>(qq@$-<qN&KiQO0quOac3E!Fp#c=KptB=#F`ube-#U:^bKsh!*s-I:O'MQVUr$
%W>$k*J'kLYg`I*Q5I66$(O)-a>&)o>RT0XrQ#/U-,+!q#%g#J*(H[]L[HoMu:A5[fMniuT2rD:>^8rE*^&Jt)Ir]2h8,hgZBYmM3
%mK4Krgq+*8n2J`!SZEnrr_sp1Ce0&*V@[+(n?!@GT\P1OXh@#IY*ur&@Qdin\p\Z+*m4oUT&]Y>nq-OIcCXXbJgrnPP^f@@0CH!F
%5(!$s\66"acHGr(ZFRH*G#!(iq[4>k2trqoEV!hEdZ-@Bb.p,b>ho7ioa!^B?"sGPH?ClYptl"&H[?]eG9;2`*WsOT2=KC2n`AR(
%*4\1[/O8aCao+$R%0)BRj*Q-N0jh?)XR:8_(EPTW;1")ieN1p(?$h()gC6B\"k.j>a6@JY?r35Wqq7fsB+OH5S"H=Vl97Ou96o@F
%hiEhbWt4+%#%):'[o*(ui_^\9"7>.NHtMJ5oCJU;[<hkoI8aJ**bqtnI%<Ks]\E"HPEkG0@e1682(;[G:MtQ*?LL((M!_p3b%?<n
%mWQCS]KT?`bqnP#o>7!6qe&8)U=VT_G<UXPrF6XUHL45@D:Dio=eP6bQ9_>?PF-X:JtThuS0o7??E=oX>I*]?l\YOcpJ17'mp!+p
%rSsIPrjK:WNMi8j3(BXQ6/L@6Q<X@Sj2W^[]tF>ZD'e(s]&e6SX)i(D-,53RH7e</WOsZ$qqiHuIgWatL.LTZDa3"^?f:7j>k<(7
%&JArBAO8&-rq^8Wpb8d^Rh8\HqSWtc>iMC;f(X6g^J"Re@Ia,0#E?+=)LB%LmVW_Z?VWKdCF?_ImQG!J3WJVP0"spFdJ('CqjXFA
%eRCHm*72lQs&`Jh#Yrs`<r7tVR5(=:kOXaJ^4;Pn:6X\;r4g'S<hIuMf,($icX3?Yq=/1\@lRZo[,uZ>;uCQb8%q2iH[i]cMfesJ
%H.a][G:Q=%bAY+e76GehA)I)lUJ]B22kf%+aDkIBaOe6L%SX^Vg>gZ?lSh3!^lD=R`HJH[ibPGj>Wg_B?_+rUruH(>`uk-Rp/<uo
%1iNBoF*@86*2jT1#>3=V%mJeJj5TTX)ra0L\/l7$c-DYocgPf-H*u5;qmBWjDRQl+I-ZD*4dj@0Tar)rj(G)>7OGi8O28g-X`D*5
%mX=k:[CA=\/O"Z156/I9G?!_5r;KVBm!!#NDR4A6!U-/S/Nsl$eZTf\oG79X@^o)W*mMrVZFt8YcI2=Q\S[WK&</n9>?cO0\f2AV
%iuPt>b2WaNXj5oRkNP'T4XZS&]g\4&@Qm/]BW,8spjT<,qI=$9Z!N_*q".I-5)*ASF7.oN%@Dp341StkG](`<JGQI^EIH&^;e;LN
%^KqIZ>PB5p8L1SDgoomQS,e4fH`IP6]\ge5r7T(o@'+@uHMM&T(=um"I[J-59m$"I`D+ZCY174]dC:/(:L8Kr)'KQYTeH51]695Z
%%D<nLi6$`MW/%B_GBrFt[2n6FbuME*0lQ/h[FVg\3'Y8o&Q=.cIUoQEN;E:[91M.deOfkFC#$\H*\4_Sh!,Xk[sqA9"*N0&LHT$`
%kVEb#bC;KY+O[gLhH9Mq?OV9(5@3\o;)l70>^u5CUAOCShaNFm$=8Aa?I.&Qj(HYW1fb+;(UbD<!"H[qS_*;oCQQS<pYaL>fsjhq
%B>UhoXKC&3k+`F_E,U*`"V>8@8)__(s,@H2_UHdX^TT%_FWsj^k2+C5`!GMMj6GI^<UK+@<Z?h%`ssLkVmb`:3*FRQcT>E;871)<
%Hb&d_^u!U'/&Ce/3afW_+8ti\+*DTW8OG]m#D9%_Qh-5@-P6_PlM&c^dL1!qS(>`%05(kHio[#qj2`1u)Dc@CAiY;oIh/(>]oA#Z
%'4COIhL=Qq2KgK(-;%[1n/?Q8J:j&kqDu*p\-@"qnu+;4)<0':Epo(,S@=a]"'n?.LrmFr21iJh<iJ(IhgKe=\^(U9$E'LHIp`QU
%a4ff_n[8/We`n78](>E,kbi9^*iuQII!Gr<WV^kTiep%DT_(I>JJgXhj`YG1?pH$)5-/nh5Q"B+ohkeahp&Xi[&_j_Yk,um5O:6]
%D7=_un>(:QSNg-kH[f(eV`u6)6^[N0a2[C6=YjWfX$S[Te<AHt*?B4f4BQj6k5J5Rbm6"d0*QR'dTf4B]lif0;ElD;>cEt^Q[.iC
%:;40Tp7Hj0oUu;,e'7XYJ#^V[Y=H9cDdRgg\:`fb"]%dN`I44&,<Fd!h-$F`jS88n!R1PT\Qn1YU_E%(JM+_.3a'GC^5[\mhh,;5
%[0JPdGTTo?gKsoZk-Tcrr]>>=:HnepmJ@YA?U#AuF!@Hq*IuCL=e2(jqPG!!U_:B3%p/L`O/e8aX,A',j`B;<-MI2,MV+$?L47Q1
%lC/+.Y2;;8=SZuTqpc'ZG<PbXPi)XRHM[s"MW"(ul(Ihm6eo`JhsYKbqp"F&f+4eJ5kcgXN+r=:H+3bJ]2ggo)h3n8Ht0n&dTeFe
%o.p>lI_P)*2W$,`^cn:.ILEm*l]$\8eb;8007EIfo(IW:MQfA=lf(KR^Y!hmr-24fp&lT'3JbCMg#*+Q?626q\N*hWHW'c>rHL9<
%DIH$LrdtZ[O6]0G/Y&tDQAV0>_SM<Q@.C^UhVFQGQ1o68G!7K9,:",ITKAj-W+(]8f8oXWARA.AI/4L;'/(i"kr-YJ:HkU^.$>?H
%AM??T]O(I.I50>uG%YIJgY<U*6Le^Yjdfn^5=!]niRa@>m2*C[nqVEZJ5*8AI7I[)XZ'QiQlnluD]ZX^B/Is'/DpDhB\/F>%i<f(
%0DHZ<$]?-#qjmENdhgB]]*GHbrk%jLp\^3WN20lu0/0;rrL2J*/U)3!s7c0#iCPne7CFu+[(Wf0.8iT9Ffrk-4Fe>e(>8:BfAA!W
%pA\QdOeukPHl+fr`P?=.UM&@+f/jFIO`MTtfte>Ns,C:56Ut5-APl.Y/VS\cIYMhq6e;l\,XSu#rqi<JC7Sf)RB6\\,0[I,ETPI&
%D&+qN):eQp=t>2-LX>s)=SN=1HAL09dC!!srr2A9HKP8(L,Y#pSrNKS=YLWR7=O/(;i[b.;B#OSah-A^_g0gRiPd*WB*FWNV@HGW
%_m6%tP?DA3a`;+KR4SK`XRA^s_1#E?c3Xp:c2-5'Tas(4*Th&!E6eMI7a/AQ^81Y%Hlk#giYIh+-+mKo<-7oMLfE/s_P%;`1tZrH
%*i]5KAn?ZJ=9J^2Td&g^KmDk>'i+uuiSB"`j(IN:1ER*9]<(a@K&?<FC%eYp0YA_P+bk__M6+sVJW[2M!L]%@79=#&[\\Iu&hiX(
%T,q:_2>gf*U$MJVcgb93*LNAnpd'm*+ju2cQQ-4!^=@1*-J-+#$gA"R/e@P:`eEDK]I;R$a94,$nccr(TLY]qgLi(_=k7c+Vl)Y3
%>.Q:-66^k\EBS*slHrcNP7g@nKOmiW>L5A(Q%mBV5Z8&Ee*W'al-rXP+T2=9nB@etU)0,_"%EAD\F!jEkXC,<19n7SBCT_,JdRWo
%)4(>G-2b%XQtK]s+Vq5E'qX_\)935,[YMYUb:Rq:'?3!AAE\r10gJeK%hC^2N[oj'na*>FXgJm:N`#$IQ/3&<L5W.N!4O9Bq,nN;
%WiYLe=rcZ<Y;sZb[cEhpJRMdr6rediiF`GY8_\cC>Cg&6d3'7(?dPDX^`<2LT%)s)fX=Wh&=A+$+IKNiVdU"X>MMcC<sYK#V6RI;
%D@+u'rtdD/q0]=RG&"KH:p3StLV>M$NpkYs.g6/l7)!aocF?c@k+]LbL-UF%\hPiBs*?g,2$8"BVSNbd\tTKE[YEJ<Y@4kPBHhgg
%;qBh-29PR3\C7'!O#'ji"cPn[$a287PNp=G;g!J9jM\Z-Kl*OF&KZ.L]%C22,j(CEnBT%TF<-k=^6[oYCBp^Q6n"kn&;Kk>D[,E6
%a9gEc)KsQ!"-Y$)9?q"WWI+a(]<3:jK@UCL/ON5:3\bNNf1XD5j1=MWU1]EWI@*VKYCl7WZSLkJU$'t@gJhH[lkforp)6/9W=+p-
%&O]m2+2bf-9UuDLQ-j-8E%kAb"#?%-3_t?"WYr#eoTXUEFu'9-V6?fG"V38>R@1N(Xg:,DAZl#um;',4^n--=\ka.X,J/K$Z</Gk
%TJrpVXtFJh&o#PZUodpb[&K^(6.#IEK\"41mL`jeD"MA.F?SS5k7P4YdH.duL0>C*Q1:4i-uOnO3t:aJ/VGn-Vs+)4@-BuSW2P+L
%ba0:-P$to6hYA6:<l?iqa,AD(\\;i.!<^BXB$)uM/?lGP6XS[8p$VlN-NW"+K+GJAIRk.A2EZ[VF>*O:6&a,D@^U"A?/IbAI`0N/
%4ao`,6EoQ%YTn!hBaBLlEkH`k>$@$s&Yq)r7flo3[M>/;f?Ta\#mHO$j^hmj3Wg9\&SXa(aRbtH#`/.^H3QLqZTS(1<;/-<kJe'q
%4(APCXa]=Gh!n7c,".BOThe$eeBinmNDTe+VdQYPKnak>'@t-1/Yo,eoX?*s<=c(m.LpZ1JsddM__f]NbT<H%NqBp)a=Q6MU%0%P
%BlsmFJH*0.<<^c.,m>Iq*(28%i#i=m[m9_WJs&d0"l-A);h5OaP&SUq;@c*r?#Z$IP\VT(_?;\DiK!(?$!4fl(LXkDJi4"93]P])
%ikuGa6KLF&#t%6ZKl@</>#BV$ck^^p]V[7#CWb!p#Zkap;%Xp5"=OQu)/&5@?'fnLK=aNXQ-F/3NWOEYUPo76&Y*Y<0XL(5IlP5E
%cmI&]MU+1gGj:[c<8&%kEh#e["LjsV0NU4)I+qS3(;ZXJ&aX*q,P@7-!;7/[".cCN@.8aZk.su'a2Y9(\:Oa-DVo\#(=QSO3qo?<
%[VbEUH"[=T(a*p!iIqV[_!*AfR`MTpFNF=!GmP^);MZXac+?mRMGUrAr56O^#a9nYI)^\#>0hG,)+BpJnL^=3'?i26Ln1q9>N_V<
%0QDhT6A.%3L_S'AiTm)bEAr9gZTY;&jm*Wc"A>(s0X):4$GZcT@@W6Lgeap)cau#R*Le!7$E4:;]%]"p>8(6s<sq,-$`5HWI*7e>
%EQ)kL&>RhcEUa^2\C/sH[C?7jp,Lc$Mh)m;Xf_sg6jQ.MBmVlPKpQXN1Y2c-!nC!bPEt6seBefO2Uc%>g(_q>cS7,/CI/Mj2)V\k
%T.H3L2jSX"_2`3paBY6\>,!4%908OA"u"e6@'F`d1]Z[3W;mdF`LNHJJpA9si6kdp^[BcI>^Xak1"B7u-DADHcmigeE=/-TLY-E9
%UVN\f?.U;!"sB-9KZU<t;dp"gQnjR;lR:/042sckiAS@0.50,c`;qV*8#WCm?5Y%r4e@$jaF1h<5c*%0!*S_MMLLjjWrs&`$E7G&
%%9j3#Y_966RVIbm+eqSeQtTNs6Q-eLT_5.50ssO`44@-:^+t:K?1Z;P3GO;>*5d%S$^jj<FC`s(*'VN(jf:+Gq*q12oSV<rJq?eD
%<D+.!?@m`ZoeS=59"">7KgZoIWekja5r)t_9/<m+U^I>)O++UG4U>X-FFbGO$]S!mYt?u^=c_YUkY(LfGE#p1m(bka>U/T?Z_;%%
%cqE<2d!Xkf<?Z@C#hQ_B4**6;kqUnP2#7Hn_KZC(Af9F$Y?`jO<rNP&1\D?<i[%d:@$i_$YMf*T:k/78%)5o;SK'L!!a83eOC>)O
%1sJ#b`AJ*I*MFKa->[S4@E1dNBXDlGU*-n`PSpo7A/ns)aQ#rI,f9:=rH1]27K@tip,#=o+qln+275Y\)hXW$/hUO`?Q^9^.#'ul
%'@"t9>D*ln[+2#uJ-g*5#bW-C/A3"F[7ulnTjb8J6TLSB,TU_%;D<RVjBi_NiW`N:H><d,'A_<DXYIj*:7>Iub..Q^e(,`p</tUb
%RMgW/R3$l3cmqAKm:u4MNiu.35Z8>D2&#m\3YO':@ri9%N_ZIHpr2eX6\/&M(rpU+LH0U^T\Q5DoPhPSfiSJA1L_J[3=8*"H4'LS
%f2:Ek\`C>qjU#AsnF8*Nc,=Ue8KgM?E(^_tAsP07*bCu]G3M*B(@0<e@7l;0nF\om-%_ue"(3[gncO8n2T(Je-B:8%Fe'06(Pm9f
%@427-gnTkVR$UmTojG.3/I3D8E^8e$e=0s92>g=GeRODI@M>TP.>)4g*D&5nV1V9Bm<D#kE2Er`KNV&<(-k5TdjV%qPXTc#<QnnS
%iQ.q(cq+sG_3i-\:%!-nT,/I#OmsB?HjJJq@1b7T'T2-s,I3<p.[Y!UIOp8>YJO`0l^#>,."RZg1Pb4<(/r0@UoduE,#E%'XspHJ
%,rU<1A=1hCJ`E+o+C;!VQ"I[LNTU?,CAso<5LlGX49b=-EZO])6@Bfi8f#//5`EfBYB`Hk3Mg"tokd41_S@-CqMoL"/Hkc(7[Qb'
%/gf3Ie=jpf2W4<8*Fh%J&"Et&`If7"gu[ISJ"'\RS)LFs7>P=Veb9]o6mV1OW>Vp.9u258#Km@Kk6RAb/t,su.7]5?9]/4E'k3#0
%@KKtOC(W!"D'-5arTTkSfE6?>UUM6tBE6WDU*U@TA:4\c3G,@@#A3ZA\]C0M\@a,9EHtpN=3h/k?seu8^32C#b;V:Wj-@SpWVILf
%X"4KWL,O]=j<NBSj`$RP,nY*`kQKf4O#V!o3$.]Z&!L.!$/I%b!\j@_)-!>7WjfX#j0R.$Y/U-`mad2$@"9)/?'.;nQql5kPct0%
%Bj50WRtj)o.$H-KMI1*&b\=Ug$5>C?VEGHCJJ,4#NBWeO+5\6.hp@Q2*T+\E?PGs7GOV9Ki)!Iu@iC*V%caF]0UBN(K+PCeKn5LY
%q386XYRdJa?p:/T`=mp`gGC5f]ad*JAmlT\U=V[fU$l4\M_]FMFG^4).1raK`9FTis42R`Y;W$7q"_!sBg0_l+V^p#]8!/s?T=E:
%*4d<:#s'o'M0nCMF?Z:_F_PCh%%%-jIR_.i2<DV[K(c@.iJnaEMW)#]c7Hn<:Z]1I^,Y@*2[e^N+cNi;0q[L_,b^_Z#j'E'!uCQL
%)^>Xia2>b2G;;ENih96G][&s4LO5C.5g==hOZn0+&5T/B\(jmpk1rj%kI?JL8_`bZJWOhb5(G@m]C0%[\2MPnclfh;;E<A$5,oDh
%GhT^j=MFka%]2kjGtC'8Zm[Y(,Rgu?`Ge!e/OHF6iR`M5\`Z#A\:G-EF#/coo\%_2jQl?Wf<0dSq.=4f2/62u9Y2qMK)9h-gE-Rd
%GS655q.O`uqIYFS2<V\$Qn^/%fFK^L3c_-)a*]et7GoCl43M;=B[83]KWKf=As?R%dqiEZX<tP'dF8W>c5?!$TjB$aQ`\<HD"rpL
%74qh-J</B)#L<F]beT;t&Pn8<^VZ>fOBao+7%\L>Rk.]2(O*r^=i5kE1o*u(7?h"K_dB>#1of-&doj<2FI'*gS`TY2XBfBubL[mM
%WFEV_Zsj?nUA`.KQfd58qLM-`Fdt5^hq7SV#^6h)O7H1#FP?st*kpRpYV0U,nX,*kDtN1-@hm,13r.AMg(8`iO2MKZ+R/OiQ/Ddb
%'eD@=n+RhMn=tA<MsYg+kV7s?R)$[#eag&n=SBiKj'%J:dV-u,,!CBPIc?a.Y!k_Q(/;>t><.AZ57("Y!J5P[=[i+!!LP]+i0p/M
%m@In3X`fpi[VTIe0aJ_1U%15A(9<VY<;.4]5@P,^N5hf\QfH20h3/e\Q<m)8Ol6=\`gngNkX^sn&\(C!LM97KD7.:cDaleh1$rZ%
%R/u%7@[Sd-:Wm3:3l4!7U[qa+q&Z]9X"99(RrT4ec&@N\@B?]s/<FABgl>rC5q+jAWY.sQ(abPbo=!gPZcGHb_"kDbU00u'.[J?$
%`).s9';(HWZ6Yr(a7`l0c14kHZQ)3![4BL6q&0BFb5Bt-p11?a7<+>b*qECA_JD?;18@(n>/JbAGc@PSXJ+A'(GG;5g_@eO0aq5&
%k6/fYqDb)i`dKQ:oMJC/c6F4#;achI7(`R5DbcYVJ>X;)`6k`%Tth^LbO^*d'_>;,<a&J4![c[,BSnrX'\/'\.pY26270/Ss!$*.
%'Lb?TN_Qo[JbD!'\Ib1jl3uB+Y.Q)Z`f71)[J^(X29j__(*t:[@$5+ACZkPYDF'MkJ0tqadas^'GKiF$5`]U]_NE&k(c]tN4mZ*L
%ZsJ_<a#kNpa!mDi2pU_9`5qE^+bjtC3<Di-OmH56p2Qj<ptY5\Z>Ffe.E,(C9(74i->%qYU(]U(DV+Sq*Kt,A6$pL_"1G&N4+N$=
%bP<Qq$l<C'QuJj=W*sAS.u`/*e<m0[[5]PX!Zg2JPb<Mup14n->$Sm'redK"[8+Y?dM!jIWGCu7'ob/jCdfs@lXMY7J5O9(]p0(C
%q.MY/CnkUYVpgi[8+SiM;\>(mRU/93fS\UM1J\1T[Ld%V82*376Y!f9G)dGIR&h1D-HnF,,*W/hTiVEH>j>om)o\27Eid@h;`_'*
%-HB&?-:XnJ)?fY:R>DmI<-jL%SdCsN2>i$d_p.)t!8M&ba3c4B/3tS!A'&`"]M"2Q22H?\%7QD>H#jIi0$IcUmI@(`,D'YfkY7;:
%I:&)7!I$qPk8H6Ur]5I\K-e!Tnl?_<7a9332W!+0;85b2'b4-)mm([2>=g[I=DePdgqr*gfFi#,hQ5^VdT6orWNg!D+NEVi5'+N>
%=KX8qcQl[*<t3"/(3Sn06q`@rkgcAYK/#`QXp`N7*Z)H%QXcBJOIfgPW_Zbq8X6+XIt>nL7\:0uU"Rpe;?uro1I"Q#8/H'Q+KZZ'
%0#Bf+CP_78QE->'3%&^bcXSERn]YuIjGY%MneXd"1$6\[CQ6]p_AcG[-I>1)Qu0l"=?2thbW:hQAf%,KA*KP!(@C5hO9M=Y->oL.
%8r4FlOOggN=KWi<UD%BC#D]1+9Ddj<&q@M%l],[L)S@(l760<'PA`Wo[L-LR&[h>#aYSIR.@"BL6%E8SpZQ^2bZH*)G30C):-G)6
%X@g#o#dh[!3EXFhPB+L7Irp1(j'cpYaoe?O+@6*+\>;jUTNgFa3Ypc`49XJ9pc:>#4EG6#8n5DRNsg$5G(VHo@?52&[%kN;Zku*K
%`3E3pHTc&C/Ombr(&_M]7)u=91U7jaHL$BF2*oE?`RMU_M,j!RJJl0k*!X/?g;FI@jsce_@Lu>iqF66dh6\"??KeO%i_n7)5[.E<
%LG>?s+W0ri*GkOFl7BY^42+<b34@Ed"iIBUFKh[Pj&;\fdQ%?#GRZsA6hrkUg`+Oq<JF"irKJ-;?/;T0%,t_eiCfjh<;`fV!6]HV
%^._0tU"`G`;iXpA`l#9.)"-F8?Us)"?-?83#hRJ2(`M`/C4XDnGLsB;EP]VAj#$)#]nj-J,FhSd%fn*\TS&]M="A+(>V1S4FbS!#
%],2BP]@/Ig:Us0kNI>BD:tV#I$lnV:cHRlpWSc]b]a%1E3U+76+n.1I8TeH%=XmqjI_=$a0&^8N3IP8)[$]O$khs^1fS/^DHIW>j
%R%A5D)pVFh,90c51BBJa(348+dCuSaY_7cjm:g#P=:j,>TS$*rcGeK?<3>&DWl?[,BO/U/eA7%b8Rrejqrb#TAr]U6KeI`")h<n\
%[h(b=9&d(:V+inNJZ7fj>&"TrQq;1''Q\p,+rRM;]3#3b%*HOfe<EII0i7PjW$>:Zh$cT9*`C3C8u[VBS<ED7AA#GV^L%\5;:="@
%;$Od1](4BB=2#7n.pn^ddU`9?'b6$YGb]<rC4bDYNami!SE#4YA'pPo2T?]C-AF3GQ'lWq^9.2@6j`Z&]cc+O:O9t!<GOA,%+i&6
%.?4]OeuA4jY+6ju"O/hR(ll#(UsA7'5nL$:bdkhR&/\3<Eq!R=<D,hii?_\[N;,@UF@=AP*J1/NTs_.Q\oWTf=jk8Ga-Jap*eE9f
%Ahj3A6E-\3a3,'2Zd$joj0fi:#?ZSYRo/'_I;]\:Yrod6hU_R8B]P[5>B>W9GA5g7O1-'RC.LO&n.?!rQPrcer;uY0d*2N9%?Z-M
%0$@=bbB!Mceugirjf;$@C>u/4`/jIZh1,`tM7CRAh0F)S\"HsW=<EM$,;HZ[Sn`,D)O^<I5`T?L!2CcIA,T#sf.@SNPCEV3A#`+q
%NaUt?fW*440$mI\/<7S@pU%mNW";a"d^'Fc8(+;?k`nnfd&:nIKWb_j`XOb6BP&3Aku@GQpt*h*MI4?;HnuG$.c0Df]N>57:^&,g
%"++)Ke>Fl9JRt-Uq0/)_`9XadaeY3pUJOFVK5J9p/6mfGl$=*ZYDYth\o8''6.l%r63KA6j\>s/2:Yh:CeVAMJN*"q\.W$iWe1R$
%_.[E/AJbdN+aq""@p'ju<0BTN:O?'$:GbEU?)8E+hEpR6)"6*Wf9/e^^[(\f&1sLu?%V%S0f15hs/ntGTbBr*b_"*H"RT5X%%58K
%5X=X4Kre,a7<=;7rI0TPdqNVfBicC[#C_eYjf?e3I/WD3^+t&3B'r9'ma:]ES`QQEF7F9[])NM_7GBesl9M_";_4Di=:\%<=kXmZ
%_X_W$9u\$lZ0SWh-sWfEAXT:<TXq-)U5]bnY:KWF/?u=Xq(aF1mmoPIjm`?g\p\=]JDSiYlJUK6PcPUE+YTF`+W.+N/X8cpS62\/
%9`Esb\Y-67^K-\"E<dhY;r&*lK:n^p?ok)*Q8.O):>T07:*bf3kut"EdCVqmeJ]gE;j-4$mXcNBUrOQ`DnXmVAsP5oh.F&1FQYG1
%1dL@<>/QOY)_X_s'TG;l753uc]qk-"X(.$G^>gBL7aUgE0I3oi;VN=>9Q@+o@Th;ZDE6FpE1`/9@:[8)ScP4oEh!8RV355:q;sRD
%0K>@ePqHmS_b!p0#s-FF>&k(8bgS`/N-XC:;Hi4">$I'i9pBR(*o5t/0WsaeDEej3gbaas2V2?'dq,f2V+3U2#c8(bU/_nl.^SY_
%%NbGW\i(?@/i`:57@:k`7heXff"rOpdaa+2QKP^#f<G@I`s+6XFPe(R4GttU2I-p;(!I7V[f_W0_q/b[p,(D6\uDo)nKH,SF6$:C
%ajs`)*YKN:Uh@J$?1T7ZOjP]l!bP?H*7r_J[rJCe]FOSb3&s[rVG)]`!:p>!Z%r]c[F,/7)gB/g[tUq@T*'#4X3C*q,M+Cd&@9p>
%\Oo%0%0"sN>nsh<W$<%:/cBNVQfoR'HZV2,[_nqK1Mspt^A5:c6unZHiU/n,kCRRs-Q!L?ju/g1FVWQ+$Fb\L9()i*+^YUc(0='.
%d+OF9F9d4b$J%[Xl0&N0V7)_>Q7dVT8if;Rlhe+!aX/<>i/(jf9USj[ipgIbTuE)g8m!cYlh7=?#cU$_G:+lGWH,PZN5mJeABi^[
%MjkY!KeueOZ)"n1E-0HeC0ETs=>2?YC*++mfArX($#/^kY-5>MCY^L_TLYW3\WZS7(A-+rH1Q%NUg@pQXq<Nm3nih@aW![9m0c9R
%4G+5@\YmH#pXN1C@76Y+(BE-keDfKpY2=E?':;<MMsfQ4nQJLW1P\DTK3`\;a#7,IGikURQZA/7ih^11A<gj94/sF/L$'klL@^Wb
%!LR`9,,C^Q/Nn,]./iAf%UT[OI6'G>kQ2q;A%8:!]abGn>WnG3/eG5H0iC)<\tq!b2S)].crV,t"gI/E]gs\:3k9"c8T(DN;nB>Y
%c=Z4Q=Cb+!&'?$I;YP1j5S_s$nF6*9*Arrj??h?_!Crd*E9t;+8cgEXD.Q0.ATS'=;X$k;&kK>URC_)%]FH_C'j.JORXe#q6?S-_
%;5o!J2KQ5-$=4,O?P^N,/KN$_hf3M4rDI>[5m8mI2$hMolaO^r'`)B14"U_.8*C$0T'pI-4kJ3dVn3uYd@%%mE[+_D1N@m-oK=A8
%oTVX,W^4(1%Sl'VGd^(GW#K2b'8WK`L)3Pi"d0?!G?>Crc*hq&W&l7>'@Ze@_Am^_"Oc)#CQHhbFNK"7)"Yt9TaO,pWZp(.dT9.s
%X"6Bkl]IF,("TtDa6g`Mpq#X&W,NW&*$s4e/7b`\/CEJ(&H\g#bdFIDbrr%2CeuKos0GE]3LNoENku#[/^rLLY/fqQoK"2_gX=`H
%$pfR)`^F!P7kB\P1&d%94UG(<Su#_<LN3!$(F*_tEN,h_`LGk0!,]89[Gj.OaC3lB/f<\(-/nuMRk(S:G+$a`fR94a^*9#]]<>I.
%?<_ab\-iB`GFV+Jf,HM.FP"cbK@\E,ei+DuG^,g)!+;s&2h1s'h3Ws@48_#)U,?jNlL%O12/[2s.Xt)Rl0>`p4KEDq>RI<YnI2so
%#Y.n$5`eKX"L3Rjf$SEj:1(>1_U39p/<iN]brqb//pFZgYru1'mR^>k!H!lJ%G7G8n`UHDgbE?G6FCXn7b>b9#"98?UWG3MQ;e6l
%81i$5YX+nlHsW1m4&:F>r8boU/ML'B*I(BoSF3rjQ!iiNDZ-frgpcXNX5$ZW$Y3uqZkJ1@H0PU62VXml3E3`p4[72;kV#d"%q8&&
%rH[-VL)OFIbimF@1'mDMeT<&OUOrL75o9J9c&LjlAK.g5Fu>Yg"Y(mX1/ktU5*ekE(^A/_m0I+J0ihIe).hW%GbjCGf#(>4O%#JY
%HqErUbhM26Wjcsi'$VHR&l!83_pkZ.K%Z=*+&Ca5TbD)PVFnPhTZb7no/c,K`skHS>m/Y>%[Qcd*[MS`2k%eWe_SXV#&^3F_-j:t
%erfEc\)h!Q_q-.==4n'j2dga!aEN=kO]S8n4HeL9)H!ZG]>?>pKmUs*>:Xa1BPQeQU4En\&MYio1,*;sJ40?NBg7DXA>>:(db"q>
%OW'QQ?`d$LhRI-]hr2R3-qag6G[0O";CGj=j6:dm(9/JGTFF@g&=/t\_,8hH_R5UP`[fYGmDKPH),:@@C=`af&Xq*a@EaG+1qlB$
%Y/:DRle7Rjl#F,AE*T8I(FE7(PenN.Z#f"K&&_mYr[Ytbe5igrgAM!Y)C>Vjd#ko#18&RUYY_W@+da#j!A%4s'%FHkSV0X3M%IM5
%Z@!:56$8/7l!0.,/9'D;b*7A`9]_?_N5.\%pr[q-=&QYd(aVc8J!%M.X*@1;`SuE$$4[Y9;N#&:a*SQRF0p`q/dt>X[e2L\QLY/4
%Up?q#J=3bEhDrf>i(74gLf+kg2F<R-GR7"l#!mLGUp/+el5"$o[0gK+nIg-/G2e0oUN;gm_M9He\r>%_i&YNaY\K<=C]%"u6R;!H
%JqRd3kZKk_Jg!P?NIX2MEO#.rde!JS47p4(VWSU>_U`$P2cK099+r"e8mB,:&VaJl$As\egse]f*aGjR'#mMqn4V3YNX!&'EH>$l
%nsg][/4^)-!N+0h=>5J"Q,#qb5,;X`GZG@rF@r*,Zr+WTM35sKl=h)$X_tq,KW&Vb`)dP9`1)$8S_4XuCR1PiYpp$VC/Y8Q7&ocQ
%4Nl=ZZgjV$e#RFT?]&nFYPYc/l%nGc13$e]KRbaM0qHR&qC+2kBO)%r!$d:f-NaYu*Qt:e1IogJYaQ+JA#jD7&107D<d?$F>#NDt
%0KC'6]"W?p-rlu9%MLg1ZA-NM&<h'S#qYc]qO(`gFQ*h4]qL'oZ:[JO]hX;!)4O3r%Ui6kq)Z\A/M3hu9WmjMVRFc:N9JqKj/)ok
%&6q>7Vc9B#S0;;2Us;F)/m1GrASmue[a6u^S3-ZmWOi:)XAiIUbR8I?'[.bZ;mW>ocl*f0Ni?(-^6HXn6]$jKPF7&=:lRhUe[>&e
%,(VHu*hs\fR3a@?9:i"'pJh9?`)N!T10"Zk$i-Eq*pD+/2IB-VAmhEl#/B9jVD4$qNto`4'Z!Wk#t.RT<p4N4P*;%1:DfiN)j`Jh
%io'aTYA[fs%Ph=#"&51Jb1rp!/Bko?T$HK.Q?Fr!Vb<u/fq'&,+jRo[QP$m9^i4o$%S(s,Rdp18D=3;&d/,=%[Q,A(i\hd;0M@82
%X1YJFbX;)mejZplh&W(U&0ji=^#CZ9psN?rVAkQgqC@ld1sV-MH[5icE(A5+Ya/VBnl78JFF^=$!bHs;=)WInY"TUWpNis_esABe
%@Amkqn9$?NmoA"FRP1Xo#gdq,1eVITfm&1\3eBhdWnq?TY@7i9Ako$L0QkMmfu^Wo&l`l\G6//u2G4H"AU-6^=G5qh`[f>Wbpuj&
%m1&8H4V=':GQ3B#1ZSE8nY?hIM4=m@&OHdojI:Pgcn*._^V=rFn)%T+0Z>*9KLok\MFgmQc+2P1UCZ\U,`9XZ9G5qOcj'i,?&VoO
%,>H?-!+sprH>46+_(73-lnjs14:T>431D"BO7@7GO>hVO$VBX\Y+lYRbgib;Q>770>c'8t\7BAAGZk.=2+8e^qnBDZIF-XN=)0sr
%l%CQ!SdnBt7r!#Cj[-5Iis@m'_9j2Le@0:s.4jVNV*!"6g-"a4#d]MX%W6T9kWaX)mV$btLI,[r<9PJ2ZQ/3+b`oC(/ORn$O^<Iq
%8&eIdi5*e[h[s\17T;.F-+V=l?lI%m@l7o_9F914fh?`e[SU/U#,)U^<cT5UTuZWuiTo8tU-M#?*Vs5',pcE%Co&H*4VJar0]R9d
%C!P)CAs<i1Ycfi#J>GHkk^/?`\VI+o#lfg_DA3oI`"$3n:pb%IFIh9+J`ar!-HEFA,4;\W.:6V+KJkj!X#q"G9P,/ZUD=G2LRNOo
%2rV`%>-`-pMX?1rcPBD#2H+Cj#gt*4+T)m(hQ.Y@2<k4\Gm\%L"4o8m2=#aK@3%$6*>%Ua;#Gl3O)2=VE(o^bF-K;7Kc]pS&2]"5
%eGHK%H!`0k]g>'0W?RJuGTpPNdGX>Zo+n/ffa-6LD+pOY%4jeZ&a#e5UfY-\7iOD.Zku#b?tLicR`/"W;IUi,fFC7_.;9M";^hf9
%/];.l[KPkOcr[e.*^8h8A:^/&fmKnI&aW>cQoUP]d7P%f2D(kH;N8&^JI<1Qjl+<P?S*Q)RVFiQi7,jIXp810'0`cP"*H/:jDdf,
%+D"jL-a@t7,uAU]%qbV#D%$)LO]8'dFD+[l_Sot&&4heYOt'QI=qukoR*Bb>J"+SZX+O(]H;F%ANO>l6ds@@U?`IOpd0Eq601]K9
%+J^3NqT';#*>LhY][0>_e<bRENX?U;BmgtcTY2MY_cE-a$-2Lu9?2$tOG]#BSk@DgW[k3\>I5R!<A<CrP6s]>gG7E.Q<mFsV9g/e
%_,0B=6/hTB:In\k&Ythi^mZKHO<L?DVfbHUZRQ)!jcDh/6ALeR;YKnip5+]?B0_<A[8j37Bq`SIQXN1".lP6RVnV#?kIKY0isrbA
%CBoH>a4M3Sf!PW8h8N&eCUpe`KHF)N[<#TbV>UUn;c19?,fbneKP*Y3csW!@>[*j![&E8HA@S>K="QRj[Ps2%+Uutr/XWsJX.?J>
%i=k$qJKRT`#+g]E>.3EX=.#3RK!fmD>o$\#Fr"u>EV9,2O4KXL]!+pOfOqYXF@6V;;]NF:B]@Ls%gkhaCtSJu]n:?]8;;MeUT,:&
%+:^7<G$Na.N8C0LDnn[D;Ro;pcO@`?U@QhK;>EZqOdR$@?),2%fNOCu^,]/%$X:A07&`#i\[E^]\C!fCM'>EUPM#_H22R_$WeKhM
%I9a)n`T-68%GZY*HT\+!NZV*>:s$ok4pN")bL%;pe0PZ-#@EjVpQYL6<E#DRM).8(A2DN"`>Q?k[KN.[X&*&@[DZhE"LBC'95rf,
%h%2rWX$&mRWnn)([Lc-3/*E%d=HR,e.r3=LobB.(V0d?(;iRu\_9u0$DN7E2'f-bqBqZPk*3&Aj$mJNs_RKDM$5kCsX0A$-ASs*R
%f#*_3L\.uo?-uY;QVeTOWfoL_-@B"K5n0l:1rhaU`Y_m(\V['fbiu\=%&*;Z/Jo@(a"J"$QA\W+kWBjdC"8e`fYmDM1:lNMB1E6H
%)L+3>XdG**%[cW/P,\>&0]h;@H?(Da+;GPo*nU:2+];fR!*l4A,e750'Q1GR&rj'*LFI%s>D%c<WCpT5k5]`skc_V\^-O:Pk3Mo'
%?kRk+"jFG4bk#Kt,\EX8Y-&.qA;>NO4=+%(46^WJ]J2_!Y#.=0Vp6VK\>E"Wafp*$+$'G*>,GqGWQ5I_@]=+aQ!q[6YpEDif5lZg
%%6"T7>Gi<[4=W$4i='bX#S0[Y1>uh;KggT9$bQ[Km5Ie<n0fHuaEqBidj\OqSPB_K:H=u9HeR]uN%QcI\?T.]9t4Oso/c;Q=",+M
%iBZ/hYogQ%$,&%Oqc\#S9nO.\O7s``0L;XI"R'-9[e;\V-+%a1I'+bSoIO7HdgtXH#^*O%Vu;iX3>XAUbo+t)+NuWAPJCJt_SCr+
%1TSHFq?@f@<p=,LP\NeOD^a"%*Q+0+1ZUu+)\q/\;_[Wog:k^,0ak+WCeOB'n>$NsD7,-<LLc\UB``*fICL"5)0",(2GUgr>We'8
%j?WGE:P>.?LE$8M0fl"[PNt$lCKh9c],>1@_6>r]SWn=N`B2Zn1]JCFW([R?M\DtFO7[Og_,o*9>L%W&d7dYIa.'rOqaUtr[rgQI
%/:H1iocQB1La:L,763'AFRIp]jm>S$U3mDj*&fD^1_1b'Jn@,pkNS."GY'rBBm*MtS"fMA/ru8ais%T8CPd*P91tt^(,W:T]$#6?
%`I1t"Zcl/`MBo`EGu'mjI>cBfkQ$UAF[>qeY&btqCp"^)$7]cpW&gD>CO"o1F'>iu;)<90F7+769TcQ)BNQTt*lPl'(7\"A=h^\A
%X;4`YH)_umWaruN*\(Mg&!_'"%iOgP??R%8OgJg'OlWAZ!PIK+ii&)rbh![ej2#V?a(W=F[qD@dm[Ca7?(2=l8?'q6?td?PCVjb^
%Y0Oh8h6n8Wbh>@lY\Gk_!I(J=#J'$-YF&>oa/GjpM\9ZJiWV-`R)Rak=LQ0;QoSDAD^6!@[Y)F#%)7I6KT)C@`"!<eD:)q^L6tY9
%dm->RR0#0caY+\CUuL;<F!N'E7d&drnZjcbTSdn"*AHOEY4"iqTZo0AAb;Rh/gn)Hh_W^^F8oVZWb>ZE"@HU!CJ@gG!CA9&q)W8u
%oR7G^Z]$KCE-9c#a-'Bl^qqkT[Z6Ab:LuPbZo$Aq`sFtj?qPMp4>FYE9Ys1YC5*^"5p#<7?S`Xd9K*7e?^Tagk![H)T!fABbc?dc
%i\#I[?Y\t+_,EC7b!Mde=D6N)P=),pT&(f3V(S12I08\6k`6r-R#m_2JKrYX.QJeSklV9\6.D;0R4V(sMea<U>doVq\Wp,s=O3OY
%#``KA-!?&:H6%TIQg'U"d_VUj^`4@Ndlg,L%AkW,!f9'OWUXdZ2mX:VokTT[EBO,rGI$2`:]m4Fb(R)90tZAIOfihS%u]GoVK0o$
%huS8XUY7-?*2Dm#:^8!"<3Guqg\\PtbDp,FpC$^[oZMb>N6(IK8%X0YL'IOkp?NjDdb%Bm\Tc&'F8rppXVHuqS?l!k\%8Uc[9FcL
%,'<P8q&(%fZ!mlN&CuB5/In##H-9%uS=Tn?f?%m[hGMakU1GO;-tN:X!<R.;0oG8S;B,e6HNPFA'ICXTJIGDkBYWlPdhE$F0W_o,
%:dU&mPY5&Hb6D#`7*($g,/QdtI_%4C-DU.:n;$oj/EX?&^D#+7!*Y6XP9Z6->h]e)rILokW*-'6i'@"BQ-`1Hp181#6H]s&`n`NT
%#%Qj0[mAQ)_#O`aK.L??Q,BK]JG[=!Z`$HLN%^'dn02XsH7KU;CkO,"#-c>(-8g+mSNR;=Q?gsgUo6i8!41]R9Y_FrTFS37*E:L^
%:eM4g"3rkUU.;/qS<,_TPkk]10hga=951lk*N_uYo9b6K&bUa@#[(f:;3X1]`-Od/UEekI%o9nS.n55QhuSm1Z7o:EY?;PBO11[f
%J=9"HL,p51$]daS'Esql%&#tUDj+.$=WPWp?\alC,J"q]>`("BOXiLs4'B&,7!:_Fs3q_YiD51`_a6tZd6aG7r+/,;5.*(j:=g_V
%CN?'7`/Qrq=VIW&;)i_fj(2mZK4EP'9Cj"nas.%9Z>.?d-;*El/1QIK8L(h^ACY<T_S5FN-5$+`E]s38AM4nI%o>0='Di3BEb&)\
%J;7iQ-:!J<bK?eICRBmD3OIA:(&RdujRSnnM@_4966\Wdeou.)jg?LMW?_RtqL=VscoepP9kslNbo5tG1k]>>h.oRhi4E#Ye;=_e
%fOdc3AW=SmkgZL7h6*W0>2DJTE\l3AT>>'B3O*g@nd$;^jB8e\8;Z&ZLjp[K,U5]-(,m_@/#&$>'^-Or0AmVL7Gkr0jsifc+iC=D
%):mTLJDKUj=YLmp1l2DB*_+Bkm\RaO?S#PDC9]qRh!'jD<9ghr>7"`X#`k?!bEE8RFo(6:g<!p(W)"[SEM;EE'krf4'g8FD]i]DB
%RWd5)no41*0d,=udENg\#W2_r.(=4n=ogP"e-OI]9m]O7RmPX.jeOY`9R*kVChS?UF167nK;A\]*==n]=%mJ[SgH6&pC9j_TKQar
%JrD(NpH0QmAr/gj+>#urY[RE0r%@0oqPsGW-<Zi)SV(X>lYZm15-B)5.LcT3/AAG;[M1W.!q=LD<_#&(/[\03]YXPK-&>Dl>i#g)
%_HrlL@4+e]ZuLqFS@lM"6V["8><G+6_4#m@6Uu:IpJDWuAtrnA1-&gc_?OS(?Eqr+ZK<Ki;PTFT!$<<8-FA+=.%#6rUo*_l72/:U
%X(j)l0sZoW'Lk_#:0sZ[)j0H6)QAJ*65h23CcEX@*ntcQSXK42Pb8oL*D70e\^NVgO.6CtJL#leS^u4<>i*Z>:.e8HoibdW]!4GA
%W0uo$GsSu;[!["5.Kb@O1nqKVlUG7k0\D1iB"`.-ldThg9>U,"CS`M&<]C4Lm2:bY,Y0`P$1-#J)lWqJ)LcD9+;K;5^-r"F^bJBX
%=Tp<'Ve7htgAAi7/,a[B![AS$L4!=;a`8GB!>,q2=th2u$'"S+l9hYTeY/d#aOKU-g5/D#W$#&qadGh<n5769E\;>^dVU'pX*H9_
%ND1kcL3u!5G-GHBVif3Y-1/#VmDZI$!.W4djS8%b=Dj]Rh;NK$7Y:_7?>rbE<bXWl[[i??][L3:$FiZl>Wu:@XCFBX1<aIW5T/d[
%OGNInG`6*dH()[DXMrp@<s9"EOUH>75MK9n.Mtj!'1!)O@);S/pa`rZCjCAc\7]G2-a`?8lX2?_Os.)5l`;T5*&?Ui3TmG-hGlcD
%"_rgOlfqfH[E_AgXDnf_Q;!G-Rf`3OPLc2D#!*AP1l&<,a;Td_CiYG/pg2eJ!/8BTL6^n#._SSUG3bAKEgFT=TD7sq$.hK(46'WK
%KbX&kh,?Hs.)iVm&%4LI-HJQm\J(Qf2<+]MdJ..fa(-@d+qu!g-&sK=%.YmuHiq>jZB^n?LTrYM'>oWPEFM8-%c<_e!3^8!.X)_$
%TrhX,be,oWfIq?mG7p+,hn?A9Mkjg6j:jOEQIWd?fkI"k\.K9->MCe0%*%\XIfe8Q-aUFO-7e_D"l)P1,pJa%Ca]s+SYha>k9)oj
%[N6T]9REdhVposXIP>J7dQ+22CU(b`8<a/;1?lC(0epr'[f_CnRZ"Xqc.l4)a\;<-'7m15bk7onS-EFRkH]ar(@rUBL'0;c9I_'?
%1YL5C#8C!rdJ:BYfSh5tbg@aWaF4N:.Mk^cp;A+f4p+:GGhNeT\^PquC?UaV+ZJN`rh<L;2%=a<Tt"NCU)dL5S[X)^('FJ%2pd5n
%/WfHIKP$]4]b=\:o[6E=ecEO*QueLaW\]6=ZKW:)_t+WpiE8>Td3'='E1#AATE\@:-N#iPKkMSkM8oK+VaujgrrkXTW5\.ZB\ZrD
%4.rJp\lXjOW[]7sr(:qZXCuUkCrD;R-]#Co_!0d)SK[Oc^T<<d!Q)B!&8+GMR\j3K<Z#%89J%e8kHVQF:FAD]eRj=Kd29^?kj2JG
%f]6gRJ#-<7dl@nJG$0]KlDu?j*EOM)"lAf-MC+o^6-#ft!`_,/FH]oB4X:8L")YA7kGg7%Wds2iNponl4&fK,7Pk8U,ZB#a*eRdf
%*G8Lk4BMrbAfGgoRru6p';`K[O[&Wf"qlBpY9H0?_f@rYbl$8RpH4A+_7(s?<]HtaWhW&k)_=6d8g.]P<MScPc,*bkk0CKYP4F53
%=SA4'b0B_L$]toAHma'sq[XtkfMU2&'1mj?4dhMAESu_=2W,#^;^%u]2p9BE"=!u^dpO:J<!ma$Y`2h$[`@E-IfSlET>fq/k-Z[n
%?ul0A1OUs_MErEnmrmGHnqL]@E/hn\VJi^p.:>ok,=kVtfYQF7NM:gs<pRPI2iCmqC(F,!H:ao"*$A<Y1bCV+h[aoS"u/>6=",*h
%N3R#MP-\[ZH]<`1K3"$XFPs5C9n6&&XudR.mc8i^eSR'^W5R`^YpZGH'^u:f?UK$T`5WNZX.`_:<fDC\P0YdQ,O,,0_k,%.;Jnh)
%3G07QZ=4?*$6k0X>JfhI_57r'6m2n?'U9`meEl_u^t]=##3Q_;Jsa"3`G`RM=C#98k=LK_5nnk9.PQmqeOC2g@ENJpN$7^P"-G<t
%)SN19?'Lts,b/7<QP>Ds0_JijP3[PmU*]G%!8%lAr->0$5u.Vl"OM:[4ogG*.$B.#%FOTVa]KWuELWm4,Z9bUS$j6%[=V@OJXZA)
%@T=+O%<`!_=c<33<fSu/MfTYQQI%2n'h$N/_&2!'c7Ec`.2U^jF'G1,^PGs1D=M323cg-qES08*RW>I^f`GS&6tK_IB0_'V/$^GI
%;cg99of\5+(u!cP@s]t]_i5j/"G\KB+V<$Wa*78Ir?E+B.&QKT3;]:?"Dp]XkWBOdei%1dQc5.;Bt0r`1i+kDF[MViai968nBqn[
%10#*0e*0hM]d]FLE+<TjN06^Z,KQLGNTLdrCF&N!^0<EC63LVMCVlgY'11`c4.7(Q(..6@K)cq>R;>+4NKt:ncfk'p$V3T2<h'FV
%>\C;/=i"FaG`0YWi$V+4A3nd3#Bn9HJJ_eh")-+uMAUdYe(<#;;/R\7K4qOMP\aUolZ&i%LP7Hg3(*`TlRrk1*Jr=-OtB&5=W=:1
%;`;R%]43!R1T+-:,p(=IWMj[l_&Yi%2(plBJSGrR#u&=4FI1q^%6:k2=BIa.I&J=.20#\84k2/$!S;L2$lgj%S;r5?LU@D&%^@1m
%AJX[28dQW-VcRY2'"r(T1O;9V/SCR&W9-4CdF5]tasQG<1RYaBkFn]'B<*C#<j4*Lj[`pm+(2F@@6]B'oa#aHIqeB>Pq&N("Ed!U
%O5,o+icGB9>Ze!^30?Q>ZS7W6c=p6Dh,>1qFcI6=;>26p&3YS:UrY-t24rk,D?bA>EYe`@($G+3(!RR,0TF5bOWIn&f#/-U&?;=&
%N-=Wp%Kt3]Z[%EN4YYoOl1-G>.BM/]9f=o'F%[cYPB[QX^=f[l+Qt6&A>QfLf":D$Q:8j7iuqD'Je3t3HA<^NfagT[i+j&Q7qEdW
%`jZBZ[WSnr%$J^_@5f7_@\tV)/'Pp2Cc-BEF2_[ml7N;VP%hmb%tt]$8Aqpd8$8TiLtTmAN$PX&<+,d)bH05gY2O?>]UdracDFV%
%.3_?]Rs'jUJu>/]WFjOIkAl,8:Dl:56cr:Q3PT)%=ti0C4fE4L+3Sch3GV!SeK40/3"1CcH3PM?1.&!PELWqko0JkW`+ZXT@6gC7
%VY0'5AGOlW#fOt8([UtN2l-XaM3I\LJFKU;&CW$4Jp%^.:JlLRTW`/Q"W5M41Ds3aX&95F/dF9/;Qh9"iKhRIUJ>kKX$Ifed.b_d
%0RlW0af`-N\fGu&93R$J-eRIQm19K=.`3T<E>lD'JuP,[!*Od::"MUEIBJK0%mP\G4GcBE([XcbUTBASOQUJlh9k$L<\I%`)u7-p
%A5Q$4-Ri9M<#BhsNA!q>`tr9J6.nY]eqS-sB=]WnPh?g]!?Qflm2gGl"qH`,aiplJ@q;WB`0oaKD&DU2/Jl?YK;"87q!X58L=AN2
%8b`aNJn'rq</&i6S]<eNL#7L?"D5]s44BRDC00%Al#:K2%M7mlY\un=^Ie#EQj`V4YF\r<'t$18qa\*X]$/_&aj/T&S0*61jr_Mu
%$OdJFAV6fq'\/G3p4=3*Lsj;u[`M*5EG>n0jFinq?/^kiapuf2]1P>DbG[f[4^&1`DjF]1EE6Nh`%p<Vddr'Uq]1qliWpHHaUl:O
%o*D#1CuelRh]VE%[53?*:'QAd.X;3LN"[Djl-W#dS7ND;pacL9cZN:%nCs"i,('1cVa&/qVk6nGlo!16]/h)Fd*b(M?'<[oo^85S
%P@73JJRdd^(?$R95P-9-,%Yb=#oVN\Pj].L%sL4-Ott?1!;srEeFJ"g,r)i\)^/Tm'G/I2f#[r/U>XVH1eHANcNYaHXX9\W-L^_h
%WM&\o=-^LOb?Ks?U3$#icVQ%n_Qr5H!t(#ofu]qni-\TLX>ptYnocrprWp?#Ah\`ZN!uAiZ^=C!F9-C.^TsIYCen`&C6##\7KrpZ
%g9a``NHkO)H5'b2]\f\'_f?XgW?Drl9f>s%$kB*\p]l]^q;WJ758j/KH5%qB"TZW)@;"!,SfMAZ`o6\J$m!:2k.;3R%VT%0G6=2h
%,&@jmLM[*e&6_$*>3ON7HQD^PG#%9NY_GW"=#(r<D87<n>sO?<<Z%f@KLaEVST+08K9j>3Fl*BR5]S>HOd6&p:9YOJiG+fsa?Tt1
%^:<tFjX".6J5l@kTL$C<p1q:!GP7;8Oo;LUC'VpdE1Naue!`J^s'2iPDuY*D5.mEFnS_OeAAnJHl>UO-5Q'a`Q!jXPo9BAan-*QX
%c[WB4^scY`)Yj)o-jOPdB<)8arj*>mp&FV`"CLXE8qK5$!]=EPkOTFBXl.N)'mTS5PQbF`"mU]cIu2&;_k3O(o)3Y&79im::Oi3)
%?!IT0H"'"YE'6MekBF3K#B4Y"m\Z)';ddjD.0@IRedR\iL$8^K/+Xt48HS7/*i)e46QpD$'FRAn3li[,DT)WM"@o$VYihX#E;i6m
%oQ27&n5-#m(Qj)V_uOVL)TdWYe`1Hj]KkBs<Utd[2XsF.lpqZ(JM[gj8'$]0"h@Y1Brf,>?uXcE_9u(QS)+cn#<@s-+QQ?-Aq5aa
%>-rACB$d=0Mqu3]V'g@=<RHbE>h9;KKXadl_6IUPK#dGBia-6#bSNf)i%fD*5g7l4=&@jj;/tGA"=lJMJ5@5:CYZZ2?,@#u#tt#g
%i?*sX)@WDl6k-9eZ!3lQOrkjrEdY+/ZXGt/VQR&&V%BK)M90m.dNfY3]6Ya]O3$:[bn$.u6oe2<KlRb7@s4&'j(es%rbaF!"&Sll
%>$buUd@Ea?mg]F8X+<fq.T_KW=:-ZC<363:%U#M@JEkO?6`I?kUro+0e0r,K$+'oq8nmDf?>&",coT0gN4GlYnTY==0RLh/ot5Pu
%L%3IJqfO8uAS*`ZL[7Q0=1Ce^V@Ubjbjp-bU[4QZGfP^#P,G#*!&_tYk+P?'oB[DW7Ip^E1[pkBPo,_dNI<p2i2]$c!BF*CFb"H"
%U:a/1@W2?m\kEnQZ$=6-GGSK;b@Dq%QYL^DeJKca`q@ZZ#UR'\K]f!goBqWbqj@Ct*FeEbrD+DM0t.QBXl_Y@'u`>:`$C"9E)q8^
%aKN\&J.0-bjBK`#A=*W0!s<bMfIg#K_8+=#(5jEfcjc1@gV+TAX343F^`[bba""MX0\R?`bak+_R";kC23jcI*BgrTNI4]N;N,7d
%PBA!)O_e?MgSl_9?:%`XP>Tq_0*MS.Mi)BP;2(WN=P<t)+]:t(MNs_qkDP0E`0Z23hYjLG&XM#YB9k6Hn2PXgg0#/.IHSAWcT!\i
%9\`/tkB)X!/-dQW!a;K6.ZX:/EO[l6%k;0I89f$4ehdLEa1um,*[Ec(U!POkY0aLW#2f_!oe>47FOOZhO)?#Yl\5!1,L2X[VS@L*
%@aTROfoQEEG_ILFgIj?D=#T@_M/%e"CW4OUJ^&.k75$"m]1C42bT>EE51gSl\_upU3d*koj^LXZiQd9,Qmu3(mpL+5-*4*m$f"3&
%k"M%i[1H>QDT81&]Jt3s7DgkhIP'1%iEZ41f-<!I8SMmh$Te\7#8)7.RDDqk!0sOA,E#]j!X+]_$gC!WH:WlPiAU&HC#'oJ_=E:V
%V,^V`Am<nZe>`acQmp=.Q5Gl+_:-0+DFm]R%LW7m(8Q9YDLESHA;9))T=U1G&4a+F#m!g4-cE%O3TPk]3$OA)-/pcNN`W4"OStJ"
%)@_1&P.N$@Pr]FDEM=NsiZs+1Chl@n+H*fiiJp45.<F>1`bOFf%PA6ggj0s+!LN.l![>E!ff+?dLg6e6!WGZ0!AM6M)5,%i1cRTP
%oTlGEGNlJcZ74JO!rFsXRqm>.!!?'+9f\.!W+\c(^)"b.@ZcD[VIbC6PV"!tVV*PtKnC7[h2IiA[5NYX$J%gPd39uXS5uc7\`#EA
%F""JO7h^oiW(+I2_5Q(*QMQLE3)Z`A$1Q("pM0gS=f`i?9r@/P5"KIoJ3[,/&`]S8+Kn.SM;UCr`FMYkHa(Q&Ppg12?i0)D.b^.%
%MNt7sUl46hh2P'`<At%b=er$Q8uXd"P'Fr9&)L/`dZ3f+H*s$tbj-s2UWN\$rk]6$(<jkI+XMAEnD$inTVRf\a,@/:C_J9P:N'-t
%X@F"<9WAu/VjVgI4`>'&Z5I!!I"lJ1Jjps^!WuLVC<-R03\'Pf`<p]@cqdf9?F6J$![Efn&3P_0'96dF/Q$X;MQ4\MQY77J;XRYF
%7c08Z(T(D$knhF@g"-Z/*)\^BStZi%XS]^^fV/-I/J_T8K]#*p^I=WNPZ6)5MHfkQ0RC1>Q3sCFL'UX_)ik!I>d)NlRfDfST@[Ij
%fp>$o<d:kui=0.4]VR#EAW8@a!;"6re&hEm.Yt#_f6qch06:'[cj:T9CctNp=OW"=o'WaEQf]:lDS+FqBSfK98lj'/VJ!+)>Yl:I
%0,.i1[`S26L5g.O'J2g,,5i!cXkg")Mkp\j#F1%g9&`7?2tD>:p#Llj7DPE$^&d`)CdM8#`CG=`*(7;.gnU1"lNb([<FGqPY7+Jg
%oI6P!KP5N.=Dq+\'r7g?Y>DL,C6k5Qe>^uC&_MQ47&04Yfk$iXB%3qf?kl6IZ3,8]gG#K6d+mjF9LWFP<Q?`AU8TjZTXG-AM,gWN
%B\m8GH'_R8KY<b1.fomX)<2RhdB>3p"IUR8gF)#`s6\_&@f$[h'[W5_InA64=I$?`+UXMrbtR*d1Vj!o>$e.^-jplFe=OhcfPfkR
%p7S*Wq<#]o'/)e-Z63r21+E$nUXXPH.??<<+jXBG.3"farcCup.PiUhMUaK<ZVohfPc:+iScZiMZCe"i>RE`hMl2H?9>AbKC+3!C
%at4W?ZkskTSKJN`9auT$g/5/sgjFnYnoHpG?PJUu=3PNte5NO:est*=8J8j_Q$Mj<H18,*AeEcNi4:Ys7d[;tH'bj.D]qou*UqHk
%AjW9Y63l[RY_05tdO;gdg,105_cU.*>T'OTc9#A!*4^ZZc-F[/b(QNL.G^S^QXQjO6(,<Df-6Q8H)0>V0&UqpasnMS2+jeX/ma`6
%H54&!V<jXI^,ItkPY,6_CFe[qhaU\=VAk?lF)ufQT+8>qo%bfMc,4GY=XefE[E]-3k%tdh!k+^QJ#leE%mV\poNnm>$VmI7p\bln
%i<r>d9G9]ie@N"1[(Ke/:WmTSSY/G-BQ#uB+8k@HbR&ZJb(BbYV[]]VDB93uW6D#7H_So?RsPl+0s@WHh(`.WYT-7t^m'0)&MgA>
%D8C?q<G;e\J!>o1oNib`MMd!//\*,SDF.*r(TL51HCQ%$41pLS\D+>l<k_L_"PH:F;47sQJMrE`c90_kik!2,MS!g>EZM0F6*K!@
%Uk,$oiPtf4HD&d=E&HfqDD@'e7OTZb"icO=h#mkhank]N**skILFo:(.i;g^3+O8dM:hPQ8X$JtL6BcuU[&[.+QbAce+UV+URbcd
%#^IjY]S8<9:PK^8'Z1W,<414UfXW:^@Nn_oa!U`+81O<!+T1Rr=1Kf"NPm]!m3DO(+Sp>o(5!7@MB-<1fd;;1X13hA$Q?6Rjq[uC
%%k`>L<$_;)NEbNeGDj8U%@8-rm$]ao+qRJ40b=nR&mZ=dC+50r+_$qRAFO.;`",$c<e,t,lGgd^BT]4q*)DV/WUaJ1Cp@O#I$F<_
%19+EuAi^tDbQgG'Jim8qER2I36NoM(A/V0]rj[k""4#"$!5Xr($7CXU5\%C8ADU2cDqQJV-&dBl:l?Ir9O]-R\a]bA)(j^$G=0[8
%C;U&K,+0uPmRYE4kX!4@n\%.^D[3mj<2@;^Ar4*T3)^NQT!Gq1X<9u-+N<J!:#nPn=`4+rfZ'.%34Rl#j,nUJS-,$q"'K-Xom-t%
%J^(VOC>Ma]R%:$U\D2aX+2sP1&R.OZX8S'D62g>M55A+I`)loE9eD6qZ60si"BkD$/<DWG$n6+\P`a5mU.eV;b).=T9#`pOmqk4h
%J)NJ;lH2Isa8Lau.OIM0$c*Dj#rm#s(bjK^mD[AphkWE$[]Bq,C-ZKc5E1`5II8iqT\![5YI"ZD[,S]E)X$'^p-"2h"m-d-ncrfm
%),.OE"e&G5Q"D1d"7\-<RL^5tpWf:PqpSWVgEjSeWJC9D*[.u`[U#<n)7p7eeqQYT5II?IO/Z6M*+r12(%/*F*t:NJX<Z9"?h4=V
%$cqVE(m?<qZq*d-r'VT,KLQ.Y@dSg3]VN6*`YbIWm'<[o"0`DH3ENLm7bPEDG?stQlG=WM8Su,.H*e8s])F-@GbaMg27^=uodoY+
%@0Lm)/dqsN7[XdAm'%V9P5Tfb#fH!*j"@JE`.=BqQXe9SdD=3I-'OXUdgOqS*@E%JJS.JPBeH1dP"lj5U!`G7ECg#1K7;E<^GR$R
%^:UZ&8-I<lI0Y9a2@mMLW[sV1;.-=mT=[M+97V)-3;7Z,$j\WU,P4s,F$b)><S%6Jj6XMXC+sE)aiqnX7fC*E[j!l3Jt.o;?B`ZO
%I=J`s79c7@WjRGQMK_q9'X>\V!k'M-Lfp3")^/+aIJ4W>5qa\`XpRd+:>Nsh(0_?X0LC<[aKGOs*i+J>G+;T"&`Y%d\AfcjGkbt%
%r7kuTYZXIii*it+3VWi@;MeQFJ.s`.T339X.Z1TS42>dPE,(fAT::9lDR#K2`7#KF'nD075R!6FbMqL[Z?Y0ai,'#U*Ftp5QZ;np
%g\UmgXb#spB2C2JjhY$D7.`hMY(s>*!ks1,4IWd:$R`_99Y=_CDQK,u)o=.'ek?:Pp3V.tX*Q/_kahQ%%cZ.5r@ZaaH+pb6]NuV-
%WCX$s#Mc]uBXgV`Aq14V<pUX.?uM$M4&M+52bgh^R3Tf>:VLuJ#U[/$W;Fa!Pr@6:s.A`Rh`"V8g)R/`1tu9k[,WboM"@<8)lM36
%Tju)aj]YkMFNb:\,O.Z*hah$1b9;ce4uZQk15Yq6#gB3fA2I+Ve&KKCDWCe2!P!F=";`"m4`\s<2/V)-f,aC$R'np3>@=+ZLE0[$
%J_#?>OgOThOb3GGetu;^K(ueMi1`oWJ,raYN"#i[[!URXI<Oe>qC'".WHW76P:bRZN]d/]&2Qga5"/>@ZbQhpTc3=P?",OR4KCOh
%Z0rG,$WX!n4q+u;C`1W6[W@^h_!7Dd$>s&4_iWJR$CK`S;AV*kX>;i:k"9h+=dohY?.\$p2p&[]dfJo$Gqli#U[BIj.ENXb+S_&*
%)U,!/_nGqDE6<84/FcgP]pBT,-7?=r[2'eC!:eOH3]H_SQbcDFHlR#bioAC\$En'ggpgD?596a\:"c`S*pU!LqIC"l`=L[rrqgZB
%*lXcX=W+Y)&7L$3YGn_('M_ALg1pPk++"]*0QS@q;"cnWautJcm[ajuVoRCP]^A'ZqhjGihF44Wa0D#5Ank]l;Rmc98R!NJ?g"7R
%[D][IkV4g:IX1`V)iq8]Fu;[kC&+;\[E&;n#keDr=P)U9W;Hn2%&9B</\8%Pl7T/9UQ-JN>V64WbIA_">^[>6YM,06^g+@uLZ+.D
%!2haBD0XlhXcAic`'2u:=[X_TMWjQu=Vk9_h`&HQaAN'H/k$_1.\9DB9-hO?[XP9Cn&=ClbtJ?:V0-G"nug%B&os.n@-q\9%ZfB9
%"_jP_f'_8"p[-l$[X!]nmmP1TN?\9ul&FcUSS@EM.-hMV09WGb,107`7?oh516*t"QSm.*AK26DRJbo$r%9E"=ZHFcJ&1RMbnh_<
%G6d.'$o\K-Yi%5,4+._I/7_cZIQYPl\#:JS9EZ&$e3btZ<Y4./%boo5F-.M5)p(ZM$kW3bDIfgQd8*QurmcpV.%?[+_b^-_CN>i"
%$=')"1^gft5LZ<#$B&I`(7()F4%,(*,$JHR_P0_Eqgrgj`SI;V9NjkH$32p+Na0XZ7.NEF4e:MuWnBQ]P!mPbo*3J=mbSph?GBel
%km<slZ@3f9dH@SY(Y_b,/$,[U.V7:_e_OQnVc5,Tjb(4Wl,<qF0@\!U"D^6FCfEVgHLs#5o2R?%F!$J%]GcnqSB[ie-ek36DG"H*
%[P]D7.%&&o\`U.8@4PPjp/[449X[Ec]`'A_(i>6Jh'l).IJ)"c@e9EN_`aAg_r:QSLUs`bD"VU#J:QaaU3eT%0U,93XVQ"3R*+WV
%9]4`_g(V$-bk^!:NhMgIJa*-slI3+</]jTV(<c!7@Xlrd5.`jA.1XhX5u-8/>d`[61IT!o9lV5H-Pp-NV@Qm3[PYsPm%e=D2AOl>
%.ZZbX@3/>rp+R!HCr]f!Z(&N[BY8C9>)65D-on^-[>4@3bkY2pT(\k$2%nbW;R^ABMp<C:WDrdOYSLTYH[J&*dII2)-HEU1Fl_H_
%OPD7TUdLu[ff$G[Vq7KYDu*'mZC8QqXcp!0(uRT/(1VTE'P^0qg*(s91a(hlG9`g4%ULVB*u\InB-?Td<Hfak5;c_a0Bg].-J^i.
%n(C-qJc<@\&7d6@Ws7O&<+"9PpMWQfBoOZAV^75ojE)\0Fo9dVk\p-/EuDVrTDRdRNg9mk,hJ_&=S2h48@-lCdM\;ITK3#8YT`G;
%X[;qM3M+@F@#M)$:0$9D+@;;C)+d+"CYk,I_"fTm#<$WX2l-Q[5pElPo^16SE8]5fq_YU6MCPUo%pd8"K9"!cm>f9=LZl,["FmoD
%6?_YiMhl2F?Ih5'\R<r&c(eli*Ao7Y[cV)Q>T(T9>fOY+mO9:K^W>mQol-?Y&qGdMWeuB)ai3=F7[A.:^MY8s?)8.>WY)dd";Ueb
%.Q.3Ms4o>k0>>Rm]?GBAENR^P)e(6)3GGSXk=.\Ld)?!(JuDp0@at>fpL2i6"7X`O#36Te3<BBB,:>?39K:OIYE`C+hYl<F1)OA'
%#^:W9YMU%hn?/^9^p+&YiPVk,&:Pi2pL:<Eo4C=\1I>2$b8*f'+j.H.nF,ChAS:f.a0B2o'Q$3D;/'&^0HmOgAE#"5gcFF5at`\.
%S1T&th(;',RVM2!*Vi'`pL!klY2YK.d)hDBN<(^ImF'Omc-/DHla6W21),fVAR#)^YG^Og+[H'k&qq<MBhNfC`jWdLd:Yr8QQ2IE
%I<]@l.hgV'2--BbK9%Qa`Xbr$9<627J.^>/Dtj.Pk&.s%NInT#dsg22E$hAq]D[_Uc/2l^_)Ab(-46"f6p$SD/aJ5fcH9,g*?b-g
%`^PSe-bPN)@K:ZPUQfLJ]]4\_X?.P2qf)Rf+!Dk8k'm7H*:@1:>h2TD`^"N=\nmTAch6LirZb)j\e2[<\](Ij^M<d%D;/,h+1EcZ
%l%PCAgZ<HZ$*82a^V7%o^=D95<J[T7j"Ns@3B=HG?oDdK6EVm3M>Kr.B8U.5?t:kV0t2BZ4oQ@DPEl^Kot.soV2pF=Y#\l:,m+E1
%P*gDCg)&_8H@1"^DFWUTrk#p#A)[6KF0cX0^CM(.6+-nOGs=DQ$GXm/q,V[O\:;S""\,-29M`R(Oh8OWNd,Y#ffLu1Ze`&J8VLW_
%de1k'IHPg(ANQJ$D?TT+G^=/Ri$;9+gZ6eZk@8K!N7iIj*q-l@/)0U?XISlcpu'tn@t9p'Gt:_`nEVWqhpdC1)n0;"AFqZE?3%IB
%f>4'7m%io0\[Uj%>i5s84M>8'YB`XnoT%N\cG0.oJsng%<BX4'`d<35iQq8hneD?(<G+&Cr5tR["]]a6d!>%4-5gW5aU"GQh&6cg
%UVt.[9%$sO*gM(^pbiqS^V@d+=baq<4;di3_<`M6"qG>'4HY.!b/),^\7--o:G9gQUcW&"qmX%%Lo-Y2CcfEYo^ltKTC;"*96`BZ
%MtueuhBk8WkWJmc6mKC,HNBXpmc-fTUA,HH7SVGM#NaeR^=a:lZ\:*&ou6=Q?^J9UrG`7`%*l:g@-))>&n!D(!sAL(Z=O#U0\Yn0
%9A;TK6gVeM&XlpMoB'E0ZiBiP*i;JdZPd<q/Un/n1Ke8hTKD-s3E+mr&;f-re?'7:7V\*Fr&?]T?N$@SFo]$+)><A:Fk?"78_!`]
%f74-UN+4j8%+;-0O8!#[Ru2MTZOBSbqn^Rs)2GbC1]/J%bh=aq$#>WPG]n#\fgm34R"Sb@508TP1jHd\$N#gMe"9P7c].=D9H3mg
%(*`WP%0@Im:6i0BHk?2E.*&3pNSnFp_F1FHe:uS\L:F:7"VUI>-.QS(%pFsHPer,Vd6k3P\b,OZ%j.Xkq4bT[k`uP+puHtsokB=e
%2[EhtjJ4u2`'raQR:Va;!h;>N[*OBprn7;()nZWnL_Knt&pH;jm`Li$[8m!dJ,0,=,Bm$o^Quui\3D=$Y;*TF*j4mIZki-<,/-RS
%a\X!ePnq\/l,bL`Pi=FZl3TGG,YQSt%r"cD'THfZTo.hqn*TX;H<@k'/%o[HDODr=_)Nc3#Zc)Me@oKqD8"`f?[G<"@\<ZeA+K,D
%PPb5@J!GEl#AY><]JMpf1k@<5"?,/Xj1!jAXEepg1;n0Lb\>:lWcA:].t]f;<F\`H<Kn[m&EL`S=3Y-9*6O2#C/9oKX:Z-_/&Y;*
%:>7Ci3Ee;"2HVDc+6m.;>")/D2?eFiT^mfnMWP_U/SO6&fZTk6Bp48H4A$D.k4^%sllg`ah0/)]dn?5Z]p;6:Yc859q1r3##LLVR
%@`&f@;+I@D-&\B^i=(3K,7^("k&2*9H`KbdDO,aas'G029e1VjC/Zi,?j3U.YEnFD*R+:B:Z''V:#EkS0Cm?u>_=%A6[ZQ5j"@**
%NDf4WOM97diN4`8,r,OX&OtbWnq%%HC=X[P-o(Voncl^/jcB/nrT6&jK!jC8p0jD<QX<9a8ntK^j9^VTH^uHo0LA7#<u+RG7\-AC
%9n[go</D`?Dpc:`F#S&ekWW`6"(d9i@m$=eB5=^Y\ui1b633L7C>bgH9S8KZHHTgRO-c<KQgQ;aeAkc#SKCJtdZB'o[&7;C\L+?T
%G`UDjc78V_^_H.0]mV3DE9)"bR`09XIjk/$!o7DsU&fP.To2;3pY#E^BC?;TpKqGS4P6n2)/Uj]Lrtfhe+_iEoiFG1%rW#[oD$c_
%_4q&!T&@fTPF&s-;a!@/Xit"9D/c)(LKE,!G8g.]V,ohL[Y?L&bpDm&7[\obHqZS\`R@;$YVk1Xn1brl@ou/f,G11Cb-W%$@uhZ[
%7X]F24a_L,cWph052U*'2HI5p],STD3iZ92>9du@)Ii3,0UX,2)Q#ZHVe/*Z9n1]M]kr2qH>W7S'auT_EDcrN+&`=i%9pNu&W?S&
%DY%u!cu7GqH5k>3/u*"G%5sEP",M<sR2hMH9JOfDaR=*l+G@WI)GrNBoWS:n[<A'0XQn'iNp@*/28:]AE@VFF,1hmrV.HZ`9@\?>
%JZW+K6/=6Jn22%QhN-8<"+Ppgs"N;W^"#``&:UN9?e8_2PH+:(+F**?g^)ca_V/GbA5-,L$q?bbLT;nkgNTFn0YC^*ZaNolh4('1
%>N5D1q[.!)/Sp9i=:!c_.>qu`;R3%eW?s^>kKHr34M;dd`NHe!G>__\_(D"N$>^Uo5@kd*`LgA^pKmd)`E1<'PA$-SN3d*=)(CE[
%ITkjl]j8t@LD"9e7+<TM,n$X?ZsfBMb?Bb_Pqj=IgS0jFN@$Y-%pg@`0ue1b&=25^5E96+?*,PodP*lcg^_Sphi,r0E3q4/*i07>
%kdjc3']!lINM=MjEnn>W(UmhSZ"po*hp;m@[\4f"?pej*96M4CJ#sQoIomt&9?1];C66/0HfFLo#AG)i*<K8?.hn'fW^c`uN-?IZ
%Lah,e+V.d$*OZ)AD7NFE8hh/('Djqn<\mG%(/<Oo/"/U-DL5ergel4<<;/1a!Z_!OX]3j!`@?ero[HdF0"^i:*00/3T?i;[BYJUh
%hskAEitbl/m)c!CF'<.4&YllYo*jcX%OH@u(tDC;F$<7dVfNcg8YII%IYONLE_*fAc0g1@"=>YeOpo0Bg;=).q6*q4`SBS*aiP'5
%2d[r&VVSuDP:EG]kf+]_Gf$]e.;4lI$Ierhi"&B0Y=A()r\@[\^"6t,nXHKRHgBlQIcQ-hPb9Xd9C;H$V1]h.+.C;`T(_\sG<R3t
%I5VJL=&CS"nPt!0/Qd/TRfMCDX\#R=,nf"`+'e9g)jWIpmTr7mGI5"o2qpe?M1o.##$=P$[N<K?l='HfGDm*h(#l\]Qa*u0\Tlm?
%S'3&l3gd6Z[e'!J&QO#G\bl7EVoq6\bd4e1ghsh.;'+?V3V?VZK+`k;mIi%$>=E>`'Jk-#aQHa+I9;FY:-\J%VNloV1pB7rVEl#\
%"h\%lQf@)2nZY%D:@EXQpGRo6j^b!:#P)S%,8X(,JhO`a0!=Uu8RRqR-6&MRrcp3S5MJ>JK8WZ.5nn\q>?E#G>rV2OWL(HNYIb`l
%E(TkZ7c`P-LciDg`.!&&inGl_N`4TsVnO[s5cW1!K9t-q8L]Z4[n>f&-"AZLb/R9>NW,LEZhq%:K3)XL,-B3bf:Vr:K,e81VlE'^
%h$T']+mMC9C?agas/LG9(AmtF)3BW_S(?K+pZlX6,e+>VnI8`S3!CDr?B4"q/aDWO`#(hobeY&bO2FV1aQq74Cn/,IBGnNJR(c'h
%Aq2:kZLo6pYUX=/,q=ELl"N['l6!M:pMC9In@He8n"$(@]PDC05>?'ZIsbN,Nachs[8EGe\'eP6aqNBgNj<4tj)h8+INQMS+2kWb
%DRY%DHE$@`H=jc2Z,XYDXLGcOW&e=?o>6*(.<q!O`/=-ZWS6t6c=T>lNY1UGloQ+qnE>W+bU!.3s1R9CRo]=V'iWjpgDlZqC`\G`
%LZ\8&DJ&@rb@^5%/QV\"Xn#_kXlu4[<BMmZg/$H;B^@QN^Rl">M8p_(/h\#(VJ0NALM@8MEE:o#%jio5**D_X@nT7WY_m5a+B?S]
%@<Xt&/13[Bg1.lR_Vh)sR(!=XiI[>r]t;nE9/QY"h2SnZX+'>i4IWcXF$XP+aJES(1tfIR:!$;32C)^+B3p9oTn_+D^0eE%b&5'?
%-pM!P4s7Ph(ZtDgg8?O8C4^pe``0&F0j&2nSZn7UaEDc&+7@IS^GMT!Mo:0j;1>HGRmsLJcL(O1("=173qdGY?JAf.O=&_fN,SO.
%r/;)(I1AKuIIm'uZrc%NVoAA:`E,]29l.n")%t8d,M1lNDNa/AhSd%;l&??8Q_g?r4<h\gU.ge`gQ&<XD)_>'(DScYCaRUe=fD$m
%n(uqBM@]\])IeiCok:O>kSm5/Rd8JIbJWB+mD<'I*2f)e]t=jRfUOa%Uo$VP)lko[:c*?W&IQU:(VQN0&M8rQFEAhcOJ7.Q%ltL%
%U#`NA0qn1Us*4R_HV1K2Z)=ss:]\Z'TpB\E)ZGLf>pVB'4"[+_,d]]c=3^YDO,g\8dtR7F6B5i+'.tM*>APg('MjggZkqVQN>SB9
%/'0^3Z9!qB^/nYG)5kN%Hb::A/#/,:3SmqE>ZGuKc-!1@(`bauob(@"Q1s;j&6?QiO?C27e:)b6r65k3:)!9,`E1OQ7f>,%TUT`<
%j8F2:]gW+I_I/9-oJkU^XZb?GOdtp^IVfO14WCP5aFf;DC>HQ3/J5:J7^Wl'4G%V&\V_(\L>XhE;%f\/A>iaC[krXRf&O)3o*\Gi
%]/h-/H]p&>%BW7X7kfiL2doqT47c&cJu[a%3BO7<+J*8t:H'4#osfe'Amdd3o13.jFh\IIQOMmn\Kn=>s7B4Pa(j/3::3pbnnj,%
%L%j$N'Lb]e*08LV9;2DoVJfbO$'qDO9K`5B?UlpTE8;PTF7]%ar>.\8nPqAm#.#b.e1Jd#K5&?hr?X5i4G+/O2M2NYZI[jm9m5:M
%fM&F?Cfjp$NpF<(,PCrMpY!(%$ZF*cdEb#Y.D3ZJ*2ZLGMEH<".7b&<4Yqk&U&mBJBCG;]IYX]jm(b_F3_t3[IG;HLT_W^hn*@:.
%EBmRk_UM36GN`KG]FLn*qtk-h_cE)4lLpfQIV)RrUk!$kh_MGfZQaF3dk.!Sg1>@oh(IMV+*Q#u2JRFh\p$A*!iFR[nWalGpB1Mg
%"_))'(3/TT;)l*II6tf,fs>I-VDW%$LM8K824dr*QS>uSl!#SPLIm4*`p[*bSZK)%@L#)A-u:eg"0.\k-nI<(6]T9?DI\J8?tk]V
%l:+FCkd1W5fUOC-aacdi'@G*4#)<So@3D?bAC5`Cq&B7%2`9+QOO4gP>dVe[@6[I;WL6Ro]bu4-5_2#B6+hM3)QR7o>2,`tE,7oG
%rD%SCh[ZJq_t_hoCjfEq/SUVCKONbXO,$9e`"M17KE&=Ih`kn5rj$4\QU%27UJ8%Tm2pfPpIk#Er_rdE5Q14=5(*C65Q(28Ip@Ri
%r0QmPr54$_lhCGFnV=mYj$3J;Dr:Se+5VGGdna?Zr8F:"s*FG&^]*`3s8A;!rp]>os77oD(D8j;+8E_qrolZIa++#Brs)RMJ#!~>
%AI9_PrivateDataEnd
